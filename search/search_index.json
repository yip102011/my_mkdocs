{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stemmer","stopWordFilter","trimmer"]},"docs":[{"location":"blog/","title":"Blog","text":""},{"location":"blog/deploy-dns-server-with-coredns-in-docker/","title":"Deploy DNS server with CoreDNS in Docker","text":"<p>Sometimes application require domain name to work properly but you don't want to by a public domain for it. This will show you how to build a simple dns server using coredns and docker.</p>","tags":["dns","dns-server","coredns","docker"]},{"location":"blog/deploy-dns-server-with-coredns-in-docker/#prepare-config-file","title":"prepare config file","text":"<p>Below config using hosts plugin, resolve coredns-example.com as 192.168.0.1. if query domain is not <code>coredns-example.com</code>, forward to 8.8.8.8 and 8.8.4.4..</p> <pre><code>sudo tee /etc/coredns/Corefile &lt;&lt;EOF\n. {\n  hosts {\n    192.168.0.1  coredns-example.com\n    fallthrough\n  }\n  log\n  forward . 8.8.8.8 8.8.4.4\n}\nEOF\n</code></pre>","tags":["dns","dns-server","coredns","docker"]},{"location":"blog/deploy-dns-server-with-coredns-in-docker/#run-coredns-container","title":"run coredns container","text":"<pre><code>docker run -d --name=coredns --restart=always -v=/etc/coredns/:/etc/coredns/ -p=53:53/udp -p=53:53/tcp coredns/coredns -conf=/etc/coredns/Corefile\n</code></pre>","tags":["dns","dns-server","coredns","docker"]},{"location":"blog/deploy-dns-server-with-coredns-in-docker/#test-dns-server","title":"test dns server","text":"<p>Here using docker desktop, so it using host name to connect the dns server.</p> <pre><code>dig @host.docker.internal isaac-coredns-example.com\n</code></pre> <pre><code>; &lt;&lt;&gt;&gt; DiG 9.18.18-0ubuntu0.22.04.2-Ubuntu &lt;&lt;&gt;&gt; @host.docker.internal coredns-example.com\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 7788\n;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n;; WARNING: recursion requested but not available\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n; COOKIE: 8470e928982e45e2 (echoed)\n;; QUESTION SECTION:\n;coredns-example.com.           IN      A\n\n;; ANSWER SECTION:\ncoredns-example.com.    3600    IN      A       192.168.0.1\n\n;; Query time: 0 msec\n;; SERVER: 192.168.0.100#53(host.docker.internal) (UDP)\n;; WHEN: Mon Apr 08 12:59:24 HKT 2024\n;; MSG SIZE  rcvd: 95\n</code></pre>","tags":["dns","dns-server","coredns","docker"]},{"location":"blog/deploy-dns-server-with-coredns-in-docker/#ios-issue-with-custom-dns-server","title":"ios issue with custom dns server","text":"<p>ios didn't not use dns server list as failover. It will randomly pick a dns server from list. you have to remove all other dns server for your custom dns record to work.</p>","tags":["dns","dns-server","coredns","docker"]},{"location":"blog/disable-cors-on-chrome/","title":"Disable CORS on chrome","text":"<p>When develop web api on local PC, you may meet CORS, but you don't config server to allow CORS. Here is how to disalbe it on chrome.</p>","tags":["chrome","cors"]},{"location":"blog/disable-cors-on-chrome/#disable-web-security","title":"Disable web security","text":"<p>You can use command to open chrome and add option <code>--disable-web-security</code> <pre><code>\"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\" --disable-web-security\n</code></pre> or even better, create shortcut for it.</p>","tags":["chrome","cors"]},{"location":"blog/disable-cors-on-chrome/#other-user","title":"other user","text":"<p>Additionally, you can add option <code>user-data-dir</code> to change user dir to sperate cookie. so you can login as another user. <pre><code>\"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\" --user-data-dir=\"C:/chrome_dev_session\" --disable-web-security\n</code></pre></p>","tags":["chrome","cors"]},{"location":"blog/mariadb-export-import-large-database/","title":"Mariadb - export import large database","text":"<p>This post is example to export and import a large Mariadb database.</p>","tags":["mariadb","export-import","large-database"]},{"location":"blog/mariadb-export-import-large-database/#check-table-size","title":"check table size","text":"<pre><code>SELECT table_name,\n  round((data_length / 1024 / 1024 ), 2) AS table_data_size_mb,\n  round((data_length / 1024 / 1024 / 1024), 2) AS table_data_size_gb,\n  round((index_length / 1024 / 1024 ), 2) AS table_index_size_mb,\n  round((index_length / 1024 / 1024 / 1024), 2) AS table_index_size_gb\nFROM information_schema.tables\nWHERE table_schema = 'my_schema'\nORDER BY data_length DESC\n</code></pre>","tags":["mariadb","export-import","large-database"]},{"location":"blog/mariadb-export-import-large-database/#install-mariadb-dump-ubuntu","title":"install mariadb-dump (Ubuntu)","text":"<pre><code># ref doc: https://mariadb.com/docs/skysql-previous-release/data-operations/backup-restore/manual-backup/#Installation\nsudo apt install wget\nwget https://downloads.mariadb.com/MariaDB/mariadb_repo_setup\necho \"ad125f01bada12a1ba2f9986a21c59d2cccbe8d584e7f55079ecbeb7f43a4da4 mariadb_repo_setup\" | sha256sum -c -\nchmod +x mariadb_repo_setup\nsudo ./mariadb_repo_setup --mariadb-server-version=\"mariadb-10.6\"\nsudo apt update\nsudo apt install mariadb-client\n</code></pre>","tags":["mariadb","export-import","large-database"]},{"location":"blog/mariadb-export-import-large-database/#export","title":"export","text":"<pre><code># ref doc: https://mariadb.com/kb/en/mariadb-dumpmysqldump/\nmariadb-dump --host \"my-mariadb-host\" --port 3306 --password --user my_db_user \\\n--insert-ignore=TRUE --skip-lock-tables=TRUE --skip-add-locks=TRUE --skip-add-drop-table=TRUE \\\n--events --routines \\\n--net-buffer-length=16777216 \\\n--max_allowed_packet=128M \\\n--log-error='~/mariadb-dump/error.log' \\\n--ssl --ssl-verify-server-cert --ssl-ca \"~/mariadb-dump/ca.pem\" \\\nmy_db | gzip &gt; ~/mariadb-dump/my_db.gz\n</code></pre> <ul> <li>if want to avoid some super large table, use option <code>--ignore-table=my_super_large_table</code></li> <li>to filter record in table, use option <code>--where \"id &gt; 10000\"</code> and add table names after db name like <code>my_db my_table_one | gzip &gt; ~/mariadb-dump/my_db.gz</code></li> </ul>","tags":["mariadb","export-import","large-database"]},{"location":"blog/mariadb-export-import-large-database/#split-large-to-small-file-easier-to-transfer","title":"split large to small file, easier to transfer","text":"<pre><code>cd ~/mariadb-dump/\nsplit --numeric-suffixes --bytes=500MB my_db.gz my_db.gz.part.\n</code></pre>","tags":["mariadb","export-import","large-database"]},{"location":"blog/mariadb-export-import-large-database/#combine-splited-files","title":"Combine splited files","text":"<pre><code>cat my_db.gz.part.* &gt; my_db.gz\n</code></pre>","tags":["mariadb","export-import","large-database"]},{"location":"blog/mariadb-export-import-large-database/#perpare-server-config-for-large-insert","title":"perpare server config for large insert","text":"<p>ref doc: https://mariadb.com/kb/en/how-to-quickly-insert-data-into-mariadb/ perpare config file for large import</p> <pre><code># mariadb_large_import_server.cnf\n[mariadb]\ninnodb_autoinc_lock_mode=2\ninnodb_buffer_pool_size=1073741824\nkey_buffer_size=1073741824\nmax_allowed_packet=134217728\n</code></pre>","tags":["mariadb","export-import","large-database"]},{"location":"blog/mariadb-export-import-large-database/#start-mariadb-with-config-file","title":"start mariadb with config file","text":"<pre><code>mariadbd --defaults-extra-file='mariadb_large_import_server.cnf'\n</code></pre> <p>OR</p> <pre><code># https://hub.docker.com/_/mariadb\nversion: \"2\"\nservices:\n  mariadb:\n    container_name: mariadb\n    image: mariadb:10.6\n    restart: always\n    volumes:\n      - /mnt/mariadb/data/:/var/lib/mysql\n      - /mnt/mariadb/mariadb_large_import_server.cnf:/etc/mysql/conf.d/mariadb_large_import_server.cnf\n    ports:\n      - \"3306:3306\"\n    network_mode: host\n</code></pre>","tags":["mariadb","export-import","large-database"]},{"location":"blog/mariadb-export-import-large-database/#perpare-client-config-for-large-insert","title":"perpare client config for large insert","text":"<p>ref doc: https://mariadb.com/kb/en/mysqld-options/ https://mariadb.com/kb/en/configuring-mariadb-with-option-files/</p> <pre><code># mariadb_large_import_client.cnf\n[client]\nunique_checks=0\nforeign_key_checks=0\n</code></pre>","tags":["mariadb","export-import","large-database"]},{"location":"blog/mariadb-export-import-large-database/#import","title":"import","text":"<pre><code>gunzip &lt; my_db.gz | mariadb  --host \"my-mariadb-host\" --port 3306 --password --user my_db_user \\\n--defaults-extra-file /mnt/mariadb/mariadb_large_import_client.cnf --force\n</code></pre>","tags":["mariadb","export-import","large-database"]},{"location":"blog/k8s-cka-exam/","title":"K8S CKA \u200b\u8003\u8a66\u200b\u7e3d\u7d50","text":"<p>\u200b\u8003\u4e86\u200b k8S CKA \u200b\u8b49\u66f8\u200b\uff0c\u200b\u7e3d\u7d50\u200b\u4e00\u4e0b\u200b\u7d93\u904e\u200b\u548c\u200b\u8981\u9ede\u200b\u3002</p> <p>\u200b\u8003\u4e86\u200b K8S CKA \u200b\u7684\u200b\u8003\u8a66\u200b\uff0c\u200b\u8003\u8a66\u200b\u662f\u200b 2022 \u200b\u5e74\u200b 7 \u200b\u6708\u200b\u7279\u50f9\u200b\u7684\u200b\u6642\u5019\u200b\u8cb7\u200b\u7684\u200b\uff0c\u200b\u82b1\u200b\u4e86\u200b 275 \u200b\u7f8e\u5143\u200b\uff0c\u200b\u539f\u50f9\u200b\u662f\u200b 375 \u200b\u7f8e\u5143\u200b\u3002\u200b\u62d6\u200b\u4e86\u200b\u534a\u5e74\u200b\u624d\u200b\u8003\u200b\uff0c\u200b\u9084\u633a\u200b\u7c21\u55ae\u200b\u7684\u200b\u3002 \u200b\u771f\u5be6\u200b\u8003\u8a66\u200b\u6bd4\u200b killer \u200b\u7684\u200b\u6a21\u64ec\u8003\u8a66\u200b\u7c21\u55ae\u200b\u5f88\u591a\u200b\uff0c\u200b\u592a\u6982\u200b 70 \u200b\u5206\u9418\u200b\u5c31\u200b\u505a\u200b\u5b8c\u200b\u4e86\u200b\uff0ckiller \u200b\u7684\u200b\u6a21\u64ec\u8003\u8a66\u200b\u5c31\u7b97\u200b\u719f\u7df4\u200b\u4e5f\u200b\u5dee\u4e0d\u591a\u200b\u8981\u200b 110 \u200b\u5206\u9418\u200b\u3002\u200b\u80fd\u904e\u200b killer \u200b\u7684\u200b\u6a21\u64ec\u8003\u8a66\u200b\u57fa\u672c\u200b\u90fd\u200b\u4e0d\u7528\u200b\u64d4\u5fc3\u200b\u3002 \u200b\u88dc\u5145\u200b\uff0c\u200b\u7b2c\u4e8c\u5929\u200b\u5c31\u200b\u6536\u5230\u200b\u5408\u683c\u200b\u7684\u200b\u96fb\u90f5\u200b\uff0c\u200b\u8b49\u66f8\u200b\u653e\u5728\u200b AWS \u200b\u7684\u200b S3 storage \u200b\u4e0a\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u96a8\u6642\u200b\u770b\u200b https://ti-user-certificates.s3.amazonaws.com/e0df7fbf-a057-42af-8a1f-590912be5460/2619881f-c1df-4f11-a4aa-c695e7ca18da-yip-wai-lung-9f8a1f2c-bffd-4e9a-a49d-e9ed7e296835-certificate.pdf</p>","tags":["kubernetes","exam","cka"]},{"location":"blog/k8s-cka-exam/#_1","title":"\u8003\u8a66\u200b\u6d41\u7a0b","text":"<ol> <li>\u200b\u7db2\u4e0a\u200b\u5831\u540d\u200b\uff0c\u200b\u5831\u540d\u200b\u4e4b\u5f8c\u200b\u4e00\u5e74\u200b\u5167\u200b\u53ef\u4ee5\u200b\u8003\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u91cd\u8003\u200b\u4e00\u6b21\u200b\u3002</li> <li>\u200b\u5230\u200bkiller.sh\u200b\u7df4\u7fd2\u200b\u3002</li> <li>\u200b\u5230\u200btrainingportal\u200b\u9810\u7d04\u200b\u8003\u8a66\u200b\u6642\u9593\u200b\u3002    \u200b\u9019\u88e1\u200b\u9084\u6709\u200b Handbook \u200b\u8ddf\u200b Important Instructions\uff0c\u200b\u6700\u200b\u597d\u770b\u200b\u4e00\u4e0b\u200b\u3002</li> <li>\u200b\u6e96\u5099\u200b\u597d\u200b\u623f\u9593\u200b(\u200b\u6c92\u6709\u200b\u5176\u4ed6\u4eba\u200b)\uff0c\u200b\u651d\u50cf\u982d\u200b(\u200b\u8981\u200b\u53ef\u200b\u79fb\u52d5\u200b\u7684\u200b)\uff0c\u200b\u9ea5\u514b\u98a8\u200b(\u200b\u4e0d\u80fd\u200b\u7528\u982d\u200b\u8f09\u5f0f\u200b\u8033\u6a5f\u200b)\uff0c\u200b\u8eab\u4efd\u8b49\u660e\u200b(\u200b\u6211\u200b\u662f\u200b\u7528\u200b\u8b77\u7167\u200b\u7684\u200b)\u3002</li> <li>\u200b\u9810\u5148\u200b\u95dc\u6389\u200b\u6240\u6709\u200b\u5176\u4ed6\u200b\u7a0b\u5f0f\u200b\uff0c\u200b\u6211\u200b\u662f\u200b\u7528\u200b\u65b0\u200b\u5efa\u7acb\u200b\u7684\u200b windows \u200b\u7528\u6236\u200b\u7684\u200b\uff0c\u200b\u6bd4\u8f03\u200b\u4e7e\u6de8\u200b\u3002</li> <li>\u200b\u8003\u8a66\u200b\u6642\u9593\u200b\u7684\u200b 30 \u200b\u5206\u9418\u200b\u524d\u8981\u200b\u5230\u200btrainingportal\u200b\u4e0b\u8f09\u200b\u8ddf\u200b\u5b89\u88dd\u200b PSI \u200b\u700f\u89bd\u5668\u200b\uff0c\u200b\u82b1\u200b\u4e86\u200b\u5927\u7d04\u200b 20 \u200b\u5206\u9418\u200b\u3002\u200b\u958b\u555f\u200b\u700f\u89bd\u5668\u200b\u7684\u200b\u6642\u5019\u200b\u6703\u200b\u544a\u8a34\u200b\u4f60\u200b\u9084\u6709\u200b\u4ec0\u9ebc\u200b\u7a0b\u5f0f\u200b\u9700\u8981\u200b\u95dc\u9589\u200b\u3002\u200b\u700f\u89bd\u5668\u200b\u8981\u200b\u6211\u200b\u95dc\u6389\u200b hyper-v \u200b\u7684\u200b\u670d\u52d9\u200b\uff0c\u200b\u82b1\u200b\u4e86\u200b 5 \u200b\u5206\u9418\u200b\u624d\u200b\u95dc\u6389\u200b\u3002</li> <li>\u200b\u958b\u555f\u200b\u700f\u89bd\u5668\u200b\u5f8c\u200b\u6703\u200b\u6709\u4eba\u200b\u6aa2\u67e5\u200b\u4f60\u200b\u7684\u200b\u8eab\u4efd\u8b49\u660e\u200b\uff0c\u200b\u623f\u9593\u200b\u3002\u200b\u5c0d\u8a71\u200b\u90fd\u200b\u662f\u200b\u6253\u5b57\u200b\u7684\u200b\uff0c\u200b\u4e0d\u7528\u200b\u8b1b\u8a71\u200b\u3002    \u200b\u6aa2\u67e5\u200b\u623f\u9593\u200b\u8981\u200b\u62ff\u200b\u8d77\u200b\u651d\u50cf\u982d\u200b\uff0c\u200b\u6309\u7167\u200b\u6307\u793a\u200b\u62cd\u651d\u200b\u5468\u570d\u200b\uff0c\u200b\u684c\u9762\u200b\u684c\u5e95\u200b\u4e0d\u80fd\u200b\u6709\u200b\u96dc\u54c1\u200b\uff0c\u200b\u96fb\u8166\u200b\u8ddf\u200b\u96fb\u7dda\u200b\u90fd\u200b\u53ef\u4ee5\u200b\uff0c\u200b\u98f2\u54c1\u200b\u53ea\u80fd\u200b\u662f\u200b\u6c34\u200b\uff0c\u200b\u8336\u200b\u90fd\u200b\u4e0d\u884c\u200b\u3002     \u200b\u9019\u500b\u200b\u6aa2\u67e5\u200b\u6bd4\u8f03\u200b\u4e45\u200b\uff0c\u200b\u6aa2\u67e5\u200b\u4e86\u200b\u5927\u7d04\u200b 20 \u200b\u5206\u9418\u200b\uff0c\u200b\u4f46\u200b\u4e0d\u7528\u200b\u64d4\u5fc3\u200b\uff0c\u200b\u6aa2\u67e5\u200b\u4e0d\u7b97\u200b\u8003\u8a66\u200b\u6642\u9593\u200b\u7684\u200b\u3002</li> <li>\u200b\u7136\u5f8c\u200b\u958b\u59cb\u200b\u8003\u8a66\u200b\u3002</li> </ol>","tags":["kubernetes","exam","cka"]},{"location":"blog/k8s-cka-exam/#_2","title":"\u8003\u8a66\u200b\u74b0\u5883","text":"<p>2022 \u200b\u5e74\u200b\u4e2d\u200b\u66f4\u63db\u200b\u8003\u8a66\u200b\u74b0\u5883\u200b\uff0c\u200b\u4e0d\u518d\u200b\u53ea\u6709\u200b terminal \u200b\u4e86\u200b\uff0c\u200b\u8f49\u6210\u200b VM\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u200b firefox \u200b\u67e5\u5b98\u7db2\u200b\u6587\u6a94\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u200b ubuntu \u200b\u7684\u200b mousepad\uff0c\u200b\u985e\u4f3c\u200b nodepad \u200b\u7684\u200b\u6771\u897f\u200b\u3002</p> <p>\u200b\u5728\u200b mousepad \u200b\u6539\u5b8c\u200b yaml \u200b\u6a94\u6848\u200b\u518d\u200b\u8907\u88fd\u200b\u9032\u200b vim\uff0c\u200b\u4e0d\u7528\u200b\u7cbe\u901a\u200b vim \u200b\u4e86\u200b\uff0c\u200b\u53ea\u8981\u200b\u6703\u200b\u8907\u88fd\u200b\u8cbc\u200b\u4e0a\u200b\u5c31\u200b\u53ef\u4ee5\u200b\uff0c\u200b\u8907\u88fd\u200b\u8cbc\u200b\u4e0a\u200b\u8a18\u5f97\u200b\u7528\u200b<code>Ctrl+Shift+c</code> \u200b\u548c\u200b <code>Ctrl+Shift+v</code>\u3002 \u200b\u4f46\u662f\u200b\u56e0\u70ba\u200b\u662f\u200b\u9060\u7a0b\u200b\u63a7\u5236\u200b VM\uff0c\u200b\u79fb\u52d5\u200b firefox \u200b\u7684\u200b\u6642\u5019\u200b\u975e\u5e38\u200b\u6162\u200b\uff0c\u200b\u76e1\u91cf\u200b\u4e0d\u8981\u200b\u52d5\u5b83\u200b\uff0cmousepad \u200b\u8ddf\u200b terminal \u200b\u5012\u200b\u662f\u200b\u5f88\u200b\u9806\u66a2\u200b\uff0c\u200b\u8a2d\u5b9a\u200b\u90fd\u200b\u4e0d\u7528\u200b\u6539\u200b\u3002PSI \u200b\u700f\u89bd\u5668\u200b\u6703\u200b\u4f54\u200b\u4e86\u200b\u4e0a\u9762\u200b\u4e00\u90e8\u200b\u4efd\u200b\u756b\u9762\u200b\uff0c\u200b\u756b\u9762\u200b\u6703\u200b\u6bd4\u8f03\u200b\u5c0f\u200b\u3002 \u200b\u56e0\u70ba\u200b\u4e0d\u80fd\u200b\u7d00\u9304\u200b\u771f\u200b\u756b\u9762\u200b\uff0c\u200b\u9019\u662f\u200b\u5728\u200b killercoda \u200b\u6a21\u64ec\u200b\u51fa\u4f86\u200b\u7684\u200b\uff0c\u200b\u6709\u200b\u9700\u8981\u200b\u53ef\u4ee5\u200b\u81ea\u5df1\u200b\u8a66\u8a66\u200b\u3002 https://killercoda.com/kimwuestkamp/scenario/cks-cka-ckad-remote-desktop </p>","tags":["kubernetes","exam","cka"]},{"location":"blog/k8s-cka-exam/#_3","title":"\u984c\u76ee","text":"<p>\u200b\u53ea\u6709\u200b 17 \u200b\u984c\u200b\uff0c\u200b\u90fd\u200b\u4e0d\u96e3\u200b\uff0c\u200b\u4e0b\u9762\u200b\u662f\u200b\u6211\u200b\u8a18\u5f97\u200b\u7684\u200b\u3002</p> <ul> <li>create node port service</li> <li>create ingress</li> <li>create pod with shared volume</li> <li>fix a worker node</li> <li>create network policy</li> <li>upgrade kubeadm, kubectl, kubelet in master node to newer version</li> <li>backup and restore etcd</li> <li>count ready worker node and type into a text file</li> <li>create deamonset that deploy on every node include master node</li> <li>create cluster role and bind to a service account</li> <li>create pvc and mount into a pod, then change volume size</li> <li>output log from a pod to a text file</li> <li>scale deployment to 3</li> </ul>","tags":["kubernetes","exam","cka"]},{"location":"blog/k8s-cka-exam/#_4","title":"\u53c3\u8003\u200b\u9023\u7d50","text":"<ul> <li>Certified Kubernetes Administrator (CKA)   \u200b\u9019\u88e1\u200b\u4ed8\u9322\u200b</li> <li>Training Portal   \u200b\u9019\u88e1\u200b\u9810\u7d04\u200b\u8003\u8a66\u200b</li> <li>killer.sh   \u200b\u8cb7\u200b\u4e86\u200b\u8003\u8a66\u200b\u53ef\u4ee5\u200b\u5728\u200b\u9019\u88e1\u200b\u7df4\u7fd2\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u53ef\u4ee5\u200b\u7528\u200b 36 \u200b\u5c0f\u6642\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u7528\u200b 2 \u200b\u6b21\u200b\u3002</li> <li>killercoda   \u200b\u9019\u662f\u200b\u514d\u8cbb\u7248\u200b killer\uff0c\u200b\u984c\u76ee\u200b\u6bd4\u8f03\u200b\u5c11\u200b\u3002</li> <li>handbook</li> <li>Important Instructions: CKA and CKAD</li> <li>Frequently Asked Questions: CKA and CKAD &amp; CKS</li> </ul>","tags":["kubernetes","exam","cka"]},{"location":"blog/k8s-ingress-installation/","title":"K8S - \u200b\u5b89\u88dd\u200b ingress nginx","text":"<p>\u200b\u5982\u4f55\u200b\u5b89\u88dd\u200b ingress-nginx</p>","tags":["kubernetes","ingress-nginx"]},{"location":"blog/k8s-ingress-installation/#_1","title":"\u524d\u8a00","text":"<p>\u200b\u6b64\u200b\u6587\u7ae0\u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u8a2d\u5b9a\u200b</p> Version Windows Windows 10 wsl2 linux Ubuntu-20.04 Docker Desktop 4.1.1(69879) Docker Kubernetes v1.21.5 <p>\u200b\u8981\u200b\u6ce8\u610f\u200b <code>ingress-nginx</code> \u200b\u7531\u200b K8S \u200b\u958b\u767c\u200b. <code>nginx-ingress</code> \u200b\u662f\u200b\u7531\u200b nginx \u200b\u958b\u767c\u200b\uff0c\u200b\u96d6\u7136\u200b\u90fd\u200b\u662f\u200b\u7528\u200b<code>nginx</code>\u200b\u4f5c\u70ba\u200b reverse proxy server \u200b\u4f46\u200b\u8a2d\u5b9a\u200b\u4e0a\u6703\u200b\u6709\u200b\u5dee\u5225\u200b\u3002</p>","tags":["kubernetes","ingress-nginx"]},{"location":"blog/k8s-ingress-installation/#_2","title":"\u5b89\u88dd","text":"<p>\u200b\u5b98\u7db2\u200b\u6709\u200b\u63d0\u4f9b\u200b\u5404\u7a2e\u200b\u5b89\u88dd\u200b\u7684\u200b\u9078\u64c7\u200b Installation Guide - NGINX Ingress Controller (kubernetes.github.io)</p> <p></p> <p>\u200b\u6b64\u6587\u200b\u4f7f\u7528\u200b Docker Desktop. \u200b\u5982\u679c\u200b k8s \u200b\u662f\u200b\u5b89\u88dd\u200b\u5728\u200b\u4f3a\u670d\u5668\u200b\u4e0a\u200b\uff0c\u200b\u8acb\u200b\u9078\u64c7\u200b Bare-metal.</p> <pre><code>kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.4/deploy/static/provider/cloud/deploy.yaml\n</code></pre> <p>\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b k8s \u200b\u6703\u200b\u5efa\u7acb\u200b\u4e00\u5806\u200b\u8cc7\u6e90\u200b</p> <p></p> <p>\u200b\u7528\u200b\u4ee5\u4e0b\u200b\u547d\u4ee4\u200b\u67e5\u770b\u200b\u8cc7\u6e90\u200b\u72c0\u614b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b <code>EXTERNAL-IP</code> \u200b\u662f\u200b localhost\u3002</p> <pre><code>kubectl get all -n ingress-nginx\n</code></pre> <p></p> <p>Ingress controller \u200b\u555f\u52d5\u200b\u5f8c\u200b\u9700\u8981\u200b\u4e00\u5b9a\u200b\u6642\u9593\u200b\u53d6\u5f97\u200b <code>EXTERNAL-IP</code> \uff0c\u200b\u5982\u200b\u986f\u793a\u200b pending\uff0c\u200b\u8acb\u200b\u7b49\u5f85\u200b 1-2 \u200b\u5206\u9418\u200b\u3002</p> <p>\u200b\u5728\u200b browser \u200b\u8f38\u5165\u200b\u7db2\u5740\u200b http://localhost/ \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u4ee5\u4e0b\u200b\u756b\u9762\u200b\uff0c\u200b\u4ee3\u8868\u200b\u5b89\u88dd\u200b\u6210\u529f\u200b\u3002</p> <p></p> <p>\u200b\u5982\u679c\u200b <code>EXTERNAL-IP</code> \u200b\u4e00\u76f4\u200b\u986f\u793a\u200b <code>pending</code>\uff0c\u200b\u53ef\u4ee5\u200b\u8cde\u8a66\u200b\u5728\u200b Docker Desktop Troubleshoot \u200b\u9801\u9762\u200b Reset Kubernetes cluster \u200b\u7136\u5f8c\u200b\u91cd\u65b0\u200b\u555f\u52d5\u200b Docker Desktop.</p> <p>\u200b\u518d\u200b\u91cd\u65b0\u5b89\u88dd\u200b ingress-nginx.</p> <p></p>","tags":["kubernetes","ingress-nginx"]},{"location":"blog/k8s-ingress-installation/#bare-metal-ingress","title":"Bare-metal ingress","text":"<p>\u200b\u5982\u679c\u200b\u662f\u200b\u4f7f\u7528\u200b bare-metal\uff0c\u200b\u5b89\u88dd\u200b\u5728\u200b\u53e6\u5916\u200b\u7684\u200b\u4f3a\u670d\u5668\u200b\u4e0a\u200b\uff0c\u200b\u9700\u8981\u200b\u81ea\u884c\u200b\u586b\u200b\u4e0a\u200b\u81ea\u5df1\u200b\u4f3a\u670d\u5668\u200b\u7684\u200b IP\u3002</p> <pre><code>kubectl patch service ingress-nginx-controller -n ingress-nginx --patch '{\"spec\": {\"externalIPs\": [\"172.28.240.1\"] }}'\n</code></pre> <p>\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5b89\u88dd\u200b MetalLB\uff0c\u200b\u81ea\u52d5\u200b\u5206\u6d3e\u200b IP\uff0c\u200b\u6b64\u8655\u200b\u4e0d\u200b\u8a73\u8ff0\u200b\u3002</p>","tags":["kubernetes","ingress-nginx"]},{"location":"blog/k8s-ingress-installation/#_3","title":"\u79fb\u9664\u200b\u5b89\u88dd","text":"<pre><code>kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.4/deploy/static/provider/cloud/deploy.yaml\n</code></pre>","tags":["kubernetes","ingress-nginx"]},{"location":"blog/k8s-ingress-tls/","title":"K8S - TLS with ingress nginx","text":"<p>\u200b\u6559\u200b\u4f60\u200b\u4f7f\u7528\u200b Proxy \u200b\u8ddf\u200b HTTPS \u200b\u7684\u200b 3 \u200b\u7a2e\u200b\u6a21\u5f0f\u200b</p>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/k8s-ingress-tls/#tls-termination","title":"TLS termination","text":"<p>nginx \u200b\u628a\u200b HTTP \u200b\u89e3\u5bc6\u200b\u5f8c\u200b\u4ee5\u200b\u660e\u6587\u200b\u65b9\u200b\u6216\u200b\u50b3\u9001\u200b\u5230\u200b\u5f8c\u65b9\u200b\u3002</p> <ul> <li>\u200b\u8a2d\u5b9a\u200b\u65b9\u4fbf\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u8a2d\u5b9a\u200b nginx</li> <li>\u200b\u5b89\u5168\u6027\u200b\u8f03\u200b\u4f4e\u200b   </li> </ul>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/k8s-ingress-tls/#tls-passthrough","title":"TLS passthrough","text":"<p>nginx \u200b\u4e0d\u200b\u9032\u884c\u200b\u89e3\u5bc6\u200b\uff0c\u200b\u7528\u200b TCP protocol \u200b\u50b3\u9001\u200b\u8cc7\u6599\u200b\u5230\u200b API\u3002</p> <ul> <li>\u200b\u7531\u65bc\u200b nginx \u200b\u4e0d\u200b\u89e3\u5bc6\u200b\uff0c\u200b\u90e8\u4efd\u200b\u529f\u80fd\u200b\u7121\u6cd5\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4f8b\u5982\u200b\u4fee\u6539\u200b HTTP Header\uff0c\u200b\u628a\u200b\u5167\u5bb9\u200b\u50b3\u9001\u200b\u5230\u200b log \u200b\u7cfb\u7d71\u200b\u7b49\u7b49\u200b</li> <li>\u200b\u5b89\u5168\u6027\u200b\u6bd4\u200b TLS termination \u200b\u9ad8\u200b   </li> </ul>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/k8s-ingress-tls/#tls-termination-tls-backend","title":"TLS termination + TLS backend","text":"<p>nginx \u200b\u628a\u200b HTTP \u200b\u89e3\u5bc6\u200b\u5f8c\u200b\uff0c\u200b\u518d\u200b\u4f7f\u7528\u200b TLS \u200b\u52a0\u5bc6\u200b\u624d\u200b\u50b3\u9001\u200b\u5230\u200b\u5f8c\u65b9\u200b\uff0c\u200b\u5169\u6bb5\u200b HTTPS\u3002</p> <ul> <li>\u200b\u5b89\u5168\u6027\u200b\u6bd4\u200b TLS termination \u200b\u9ad8\u200b\uff0c\u200b\u6bd4\u200b TLS passthrough \u200b\u4f4e\u200b</li> <li>nginx \u200b\u53ef\u4ee5\u200b\u9032\u884c\u200b\u89e3\u5bc6\u200b\uff0c\u200b\u4e26\u200b\u4f7f\u7528\u200b\u4fee\u6539\u200b HTTP Header\uff0clog \u200b\u7b49\u200b\u529f\u80fd\u200b</li> <li>\u200b\u8a2d\u5b9a\u200b\u7e41\u7463\u200b   </li> </ul>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/k8s-ingress-tls/#namespace","title":"\u5efa\u7acb\u200b Namespace","text":"<pre><code>kubectl create namespace sandbox\nkubectl config set-context --current --namespace=sandbox\n</code></pre>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/k8s-ingress-tls/#prepare-certificate","title":"\u6e96\u5099\u200b\u6191\u8b49\u200b Prepare Certificate","text":"<ul> <li>\u200b\u5b89\u88dd\u200b cert manager</li> </ul> <pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.8.0/cert-manager.yaml\n</code></pre> <ul> <li>\u200b\u5efa\u7acb\u200b Self Sign Root CA</li> </ul> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  namespace: sandbox\n  name: selfsigned-issuer\nspec:\n  selfSigned: {}\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  namespace: sandbox\n  name: root-ca\nspec:\n  isCA: true\n  commonName: Root CA\n  secretName: root-ca\n  usages:\n    - signing\n    - cert sign\n    - crl sign\n  privateKey:\n    encoding: PKCS8\n    algorithm: ECDSA\n    size: 256\n  issuerRef:\n    name: selfsigned-issuer\n---\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  namespace: sandbox\n  name: root-ca-issuer\nspec:\n  ca:\n    secretName: root-ca\nEOF\n</code></pre> <ul> <li>\u200b\u5efa\u7acb\u200b Intermediate CA</li> </ul> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  namespace: sandbox\n  name: inter-ca\nspec:\n  isCA: true\n  commonName: Intermediate CA\n  secretName: inter-ca\n  usages:\n    - signing\n    - cert sign\n    - crl sign\n  privateKey:\n    encoding: PKCS8\n    algorithm: ECDSA\n    size: 256\n  issuerRef:\n    name: root-ca-issuer\n---\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  namespace: sandbox\n  name: inter-ca-issuer\nspec:\n  ca:\n    secretName: inter-ca\nEOF\n</code></pre> <ul> <li>\u200b\u5efa\u7acb\u200b Nginx \u200b\u4f3a\u670d\u5668\u200b\u6191\u8b49\u200b Nginx Server Cert</li> </ul> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  namespace: sandbox\n  name: nginx-server-cert\nspec:\n  isCA: false\n  secretName: nginx-server-cert\n  commonName: Nginx Server Cert\n  dnsNames:\n    - localhost\n    - test-nginx-server.com\n    - test-nginx-api-server.com\n  usages:\n    - digital signature\n    - key encipherment\n    - server auth\n  privateKey:\n    encoding: PKCS8\n    algorithm: ECDSA\n    size: 256\n  issuerRef:\n    name: inter-ca-issuer\nEOF\n</code></pre> <ul> <li>\u200b\u5efa\u7acb\u200b API \u200b\u4f3a\u670d\u5668\u200b\u6191\u8b49\u200b API Server Cert</li> </ul> <pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  namespace: sandbox\n  name: api-server-cert\nspec:\n  isCA: false\n  secretName: api-server-cert\n  commonName: API Server Cert\n  dnsNames:\n    - localhost\n    - test-api-server.com\n  usages:\n    - digital signature\n    - key encipherment\n    - server auth\n  privateKey:\n    encoding: PKCS8\n    algorithm: ECDSA\n    size: 256\n  issuerRef:\n    name: inter-ca-issuer\nEOF\n</code></pre> <ul> <li>\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5df2\u7d93\u200b\u5efa\u7acb\u200b\u4e86\u200b 4 \u200b\u500b\u200b tls secret</li> </ul> <pre><code>kubectl get secret | grep tls\n</code></pre> <pre><code>api-server-cert       kubernetes.io/tls\ninter-ca              kubernetes.io/tls\nnginx-server-cert     kubernetes.io/tls\nroot-ca               kubernetes.io/tls\n</code></pre> <ul> <li>\u200b\u5c07\u200b Root CA \u200b\u52a0\u5165\u200b\u4fe1\u4efb\u200b\u540d\u55ae\u200b</li> </ul> <pre><code># download ca cert from k8s secret\nkubectl get secret root-ca -o go-template='{{index .data \"ca.crt\"|base64decode}}' &gt; root_ca.crt\n\n# add to trusted list\nsudo cp root_ca.crt /usr/local/share/ca-certificates\nsudo update-ca-certificates\n</code></pre>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/k8s-ingress-tls/#api-service-and-nginx","title":"\u90e8\u7f72\u200b api service and nginx","text":"<pre><code># deploy api service\nkubectl apply -f https://raw.githubusercontent.com/yip102011/isaac_test_api/master/k8s_deploy/k8s_deploy.yaml\n\n# deploy nginx\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.0/deploy/static/provider/cloud/deploy.yaml\n</code></pre>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/k8s-ingress-tls/#ingress-tls-termination","title":"\u90e8\u7f72\u200b Ingress (TLS termination)","text":"<pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: tls-termination-ingress\nspec:\n  ingressClassName: nginx\n  tls:\n    - hosts:\n      - test-nginx-server.com\n      secretName: nginx-server-cert\n  rules:\n  - host: test-nginx-server.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: test-api\n            port:\n              number: 80\nEOF\n</code></pre> <ul> <li>\u200b\u67e5\u770b\u200b\u9023\u63a5\u200b\u6191\u8b49\u200b</li> </ul> <pre><code># \u200b\u67e5\u770b\u200b\u9023\u63a5\u200b\u6191\u8b49\u200b\necho | openssl s_client -servername test-nginx-server.com -connect 127.0.0.1:443 | grep CN\n\n# \u200b\u67e5\u770b\u200b\u6191\u8b49\u200b\u8a73\u7d30\u8cc7\u6599\u200b\necho | openssl s_client -servername test-nginx-server.com -connect 127.0.0.1:443  | openssl x509 -inform pem -noout -text\n\n# \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5df2\u7d93\u200b\u5728\u200b\u4f7f\u7528\u200b nginx server cert\n</code></pre> <ul> <li>\u200b\u8a2a\u554f\u200b API</li> </ul> <pre><code>curl --resolve test-nginx-server.com:127.0.0.1 https://test-nginx-server.com/hello\n</code></pre> <p>Hello World!</p>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/k8s-ingress-tls/#ingress-tls-passthrough","title":"\u90e8\u7f72\u200b Ingress (TLS passthrough)","text":"<pre><code># \u200b\u589e\u52a0\u200b --enable-ssl-passthrough \u200b\u5230\u200b container args\nkubectl patch deployments.apps ingress-nginx-controller -n ingress-nginx --type=json -p='[{\"op\": \"add\", \"path\": \"/spec/template/spec/containers/0/args/-\", \"value\": \"--enable-ssl-passthrough\" }]'\n\n# \u200b\u6ce8\u610f\u200b\u9019\u6b21\u200b\u589e\u52a0\u200b\u4e86\u200b annotations\n# host \u200b\u6539\u6210\u200b test-api-server.com\n# \u200b\u5f8c\u200b\u53f0\u200b\u4f7f\u7528\u200b 443 \u200b\u9023\u63a5\u200b API\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: tls-passthrough-ingress\n  annotations:\n      nginx.ingress.kubernetes.io/ssl-passthrough: \"true\"\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: test-api-server.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: test-api\n            port:\n              number: 443\nEOF\n</code></pre> <ul> <li>\u200b\u67e5\u770b\u200b\u9023\u63a5\u200b\u6191\u8b49\u200b</li> </ul> <pre><code># \u200b\u67e5\u770b\u200b\u9023\u63a5\u200b\u6191\u8b49\u200b\necho | openssl s_client -servername test-api-server.com -connect 127.0.0.1:443 | grep CN\n\n# \u200b\u67e5\u770b\u200b\u6191\u8b49\u200b\u8a73\u7d30\u8cc7\u6599\u200b\necho | openssl s_client -servername test-api-server.com -connect 127.0.0.1:443  | openssl x509 -inform pem -noout -text\n\n# \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5df2\u7d93\u200b\u5728\u200b\u4f7f\u7528\u200b API server cert\n</code></pre> <ul> <li>\u200b\u8a2a\u554f\u200b API</li> </ul> <pre><code>curl --resolve test-api-server.com:127.0.0.1 https://test-nginx-server.com/hello\n</code></pre> <p>Hello World!</p>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/k8s-ingress-tls/#ingress-tls-termination-tls-backend","title":"\u90e8\u7f72\u200b Ingress (TLS termination + TLS backend)","text":"<pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: tls-termination-tls-backend-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/backend-protocol: \"HTTPS\"\nspec:\n  ingressClassName: nginx\n  tls:\n    - hosts:\n      - test-nginx-api-server.com\n      secretName: nginx-server-cert\n  rules:\n  - host: test-nginx-api-server.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: test-api\n            port:\n              number: 443\nEOF\n</code></pre> <ul> <li>\u200b\u67e5\u770b\u200b\u9023\u63a5\u200b\u6191\u8b49\u200b</li> </ul> <pre><code># \u200b\u67e5\u770b\u200b\u9023\u63a5\u200b\u6191\u8b49\u200b\necho | openssl s_client -servername test-nginx-api-server.com -connect 127.0.0.1:443 | grep CN\n\n# \u200b\u67e5\u770b\u200b\u6191\u8b49\u200b\u8a73\u7d30\u8cc7\u6599\u200b\necho | openssl s_client -servername test-nginx-api-server.com -connect 127.0.0.1:443  | openssl x509 -inform pem -noout -text\n\n# \u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5728\u200b\u4f7f\u7528\u200b Nginx server cert\uff0c\u200b\u4f46\u5f8c\u53f0\u200b\u4e5f\u200b\u6703\u200b\u7528\u200b TLS \u200b\u9023\u63a5\u200bAPI\n</code></pre> <ul> <li>\u200b\u8a2a\u554f\u200b API</li> </ul> <pre><code>curl --resolve test-nginx-api-server.com:127.0.0.1 https://test-nginx-server.com/hello\n</code></pre> <p>Hello World!</p>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/k8s-ingress-tls/#_1","title":"\u53c3\u8003\u200b\u6587\u4ef6","text":"<ul> <li>https://cert-manager.io/docs/installation/</li> </ul>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/export-markdown-to-docx/","title":"Export markdown to docx","text":"<p>How to export markdown file to word docx file </p>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/export-markdown-to-docx/#export-markdown-to-word-docx-file","title":"Export markdown to word docx file","text":"","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/export-markdown-to-docx/#install-pandoc","title":"Install Pandoc","text":"<p>Install pandoc from https://pandoc.org/installing.html</p>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/export-markdown-to-docx/#modify-style","title":"modify style","text":"<ol> <li>export default style docx, open it.</li> </ol> <pre><code>pandoc -o custom-reference.docx --print-default-data-file reference.docx\n</code></pre> <ol> <li> <p>modify header style    </p> </li> <li> <p>modify table style</p> </li> </ol> <p>Select table, click <code>Table Design</code> on top bar.    Select <code>Table Normal</code> </p> <ol> <li>save docx file</li> </ol>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/export-markdown-to-docx/#export-markdown-file-to-docx-file","title":"Export markdown file to docx file","text":"<ol> <li> <p>config vscode settings    add <code>--reference-doc=\"custom-reference.docx\"</code> to \"Docx Opt String\"    </p> </li> <li> <p>exoprt markdown to docx file    </p> </li> </ol>","tags":["kubernetes","ingress-nginx","tls"]},{"location":"blog/how-to-mount-minio-bucket-as-linux-folder/","title":"How to mount minio bucket as linux folder","text":"<p>This post teach you how to mount a minio bucket as a folder.</p> <ol> <li>install s3fs-fuse</li> </ol> <pre><code># install s3fs-fuse\napt install s3fs\ns3fs --version\n</code></pre> <ol> <li>mounting minio bucket</li> </ol> <pre><code>MINIO_HOST=\"http://192.168.64.131:9000\"\nBUCKET_NAME=\"my-bucket\"\nACCESS_KEY_ID=\"dU2mOQuZqPbrTfIg\"\nACCESS_SECRET=\"3T7qxg6ztoxVX3YqTHJAU6O46FqzZJ4k\"\nMOUNT_FOLDER=\"/mnt/minio-buckets/my-bucket\"\n\n# \"us-east-1\" is minio default region\nENDPOINT=\"us-east-1\"\n\n# perpare password file\necho ${ACCESS_KEY_ID}:${ACCESS_SECRET} &gt; ${HOME}/.passwd-s3fs\nchmod 600 ${HOME}/.passwd-s3fs\n\n# ensure folder exists and empty\nsudo mkdir -p ${MOUNT_FOLDER}\n\n## try to mount, this will unmount when you press Ctrl+C\nsudo s3fs ${BUCKET_NAME} ${MOUNT_FOLDER} \\\n  -o dbglevel=info -f -o curldbg \\\n  -o passwd_file=${HOME}/.passwd-s3fs \\\n  -o host=${MINIO_HOST} \\\n  -o endpoint=${ENDPOINT} \\\n  -o use_path_request_style \\\n  -o allow_other\n\n# if mount successful, press Ctrl+C to exit\n\n# backup fstab file\nmkdir -p ${HOME}/backup\nsudo cp /etc/fstab ${HOME}/backup/fstab\n\n# append to fstab\necho \"${BUCKET_NAME} ${MOUNT_FOLDER} fuse.s3fs _netdev,passwd_file=${HOME}/.passwd-s3fs,host=${MINIO_HOST},endpoint=${ENDPOINT},use_path_request_style,allow_other 0 0\" | sudo tee --append /etc/fstab\n\n# check fstab\nsudo cat /etc/fstab\n\n# apply updated fstab\nsudo mount -a\n\n# check mount status\nsudo df -h | grep s3fs\n\n# clearup command hsitory in this session\nhistory -c\n</code></pre> <ol> <li> <p>other useful command option</p> </li> <li> <p>-o ssl_verify_hostname=0 (for https, disable hostname checking)</p> </li> <li>-o no_check_certificate (for https, disable ca checking, usful when cert is self signed)</li> <li>-o connect_timeout=5</li> <li>-o logfile=/mnt/minio-buckets/s3fs.log</li> <li>-o passwd_file=/mnt/minio-buckets/.passwd-s3fs</li> <li> <p>-o curldbg=normal</p> </li> <li> <p>unmount</p> </li> </ol> <pre><code>## remove config in /etc/fstab\nsudo vim /etc/fstab\n## unmount folder\nsudo umount \"/mnt/minio-buckets/my-bucket\"\n</code></pre>","tags":["minio","s3fs","s3"]},{"location":"blog/how-to-mount-minio-bucket-as-linux-folder/#ref-docs","title":"Ref Docs","text":"<ul> <li>https://github.com/s3fs-fuse/s3fs-fuse</li> <li>https://aws.amazon.com/cn/blogs/china/s3fs-amazon-ec2-linux/</li> </ul>","tags":["minio","s3fs","s3"]},{"location":"blog/openssl-create-cert/","title":"OpenSSL - \u200b\u4f7f\u7528\u200b openssl \u200b\u751f\u6210\u200b TLS \u200b\u6191\u8b49","text":"<p>\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b openssl \u200b\u751f\u6210\u200b TLS \u200b\u9700\u8981\u200b\u7684\u200b\u6191\u8b49\u200b</p>","tags":["openssl","tls"]},{"location":"blog/openssl-create-cert/#_1","title":"\u751f\u6210\u200b\u81ea\u7c3d\u200b\u4f3a\u670d\u5668\u200b\u8b49\u66f8","text":"<pre><code>openssl req -x509 -nodes -newkey rsa:2048 \\\n-subj='/CN=Self Sign Cert' \\\n-extensions usr_cert \\\n-addext \"keyUsage           = nonRepudiation, digitalSignature, keyEncipherment\" \\\n-addext \"extendedKeyUsage   = serverAuth\" \\\n-addext \"subjectAltName     = DNS:www.server.com,DNS:localhost,IP:127.0.0.1\" \\\n-out=crt.pem -keyout=key.pem\n</code></pre>","tags":["openssl","tls"]},{"location":"blog/openssl-create-cert/#_2","title":"\u751f\u6210\u200b\u5b8c\u6574\u200b\u6191\u8b49\u200b\u93c8","text":"","tags":["openssl","tls"]},{"location":"blog/openssl-create-cert/#generate-self-sign-root-ca-cert","title":"\u751f\u6210\u200b\u81ea\u7c3d\u200b\u6839\u200b\u6191\u8b49\u200b Generate self sign root CA cert","text":"<pre><code># \u200b\u751f\u6210\u200b\u79c1\u9470\u200b\n# generate private key\nopenssl genrsa -out=root_ca_key.pem 2048\n\n# \u200b\u7528\u200b\u79c1\u9470\u200b\u751f\u6210\u200b\u6839\u200b\u6191\u8b49\u200b\n# generate root cert from private key\nopenssl req -x509 -sha256 -new -days=10950 \\\n-subj='/CN=Root CA/C=HK/L=Hong Kong' \\\n-addext \"keyUsage = critical, keyCertSign, cRLSign\" \\\n-key=root_ca_key.pem -out=root_ca_crt.pem\n\n# \u200b\u751f\u6210\u200b\u6d41\u6c34\u865f\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u7c3d\u767c\u200b\u8b49\u66f8\u200b\uff0c\u200b\u6d41\u6c34\u865f\u200b\u6703\u52a0\u200b\u4e00\u200b\n# create root ca serial number file, this will record how many cert this ca issued\nopenssl rand -hex -out=root_ca_srl.txt 20\n\n# \u200b\u6aa2\u67e5\u200b\u6191\u8b49\u200b\u8a0a\u606f\u200b\n# check cert info\nopenssl x509 -in root_ca_crt.pem -text\n</code></pre>","tags":["openssl","tls"]},{"location":"blog/openssl-create-cert/#issue-intermediate-ca-cert","title":"\u751f\u6210\u200b\u4e2d\u9593\u200b\u6191\u8b49\u200b Issue intermediate CA cert","text":"<pre><code># \u200b\u6191\u8b49\u200b\u914d\u7f6e\u200b\n# cert config, ref: https://www.openssl.org/docs/man1.0.2/man5/x509v3_config.html\ntee inter_ca_ext.cnf &lt;&lt;EOF\n[inter_ca_ext]\nsubjectKeyIdentifier    = hash\nauthorityKeyIdentifier  = keyid:always,issuer\nbasicConstraints        = critical, CA:TRUE, pathlen:0\nkeyUsage                = critical, keyCertSign, cRLSign\nEOF\n\n# \u200b\u751f\u6210\u200b\u79c1\u9470\u200b\n# generate private key\nopenssl genrsa -out=inter_ca_key.pem 2048\n\n# \u200b\u751f\u6210\u200b CSR\n# generate CSR (Certificate Signing Request)\nopenssl req -sha256 -new -subj='/CN=Intermediate CA/C=HK/L=Hong Kong' \\\n-key=inter_ca_key.pem -out=inter_ca_csr.pem\n\n# \u200b\u7c3d\u767c\u200b\u4e2d\u9593\u200b\u6191\u8b49\u200b\n# issue intermediate ca with root ca\nopenssl x509 -req -days=1095 -CAserial=root_ca_srl.txt \\\n-CA=root_ca_crt.pem -CAkey=root_ca_key.pem \\\n-extfile=inter_ca_ext.cnf -extensions=inter_ca_ext \\\n-in=inter_ca_csr.pem -out=inter_ca_crt.pem\n\n# \u200b\u751f\u6210\u200b\u6d41\u6c34\u865f\u200b\uff0c\u200b\u6bcf\u6b21\u200b\u7c3d\u767c\u200b\u8b49\u66f8\u200b\uff0c\u200b\u6d41\u6c34\u865f\u200b\u6703\u52a0\u200b\u4e00\u200b\n# create root ca serial number file, this will record how many cert this ca issued\nopenssl rand -hex -out=inter_ca_srl.txt 20\n\n# \u200b\u6aa2\u67e5\u200b\u6191\u8b49\u200b\u8a0a\u606f\u200b\n# check cert info\nopenssl x509 -in inter_ca_crt.pem -text\n</code></pre>","tags":["openssl","tls"]},{"location":"blog/openssl-create-cert/#generate-server-cert","title":"\u751f\u6210\u200b\u4f3a\u670d\u5668\u200b\u6191\u8b49\u200b Generate Server Cert","text":"<pre><code># \u200b\u6191\u8b49\u200b\u914d\u7f6e\u200b\n# cert config\ntee server_ext.cnf &lt;&lt;EOF\n[server_ext]\nsubjectKeyIdentifier    = hash\nauthorityKeyIdentifier  = keyid,issuer\nbasicConstraints        = critical, CA:FALSE\nkeyUsage                = critical, nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage        = critical, serverAuth\nsubjectAltName          = @server_ext_san\n\n[server_ext_san]\nDNS.1 = nginx.test.isaac.com\nDNS.2 = localhost\nIP.1  = 127.0.0.1\nEOF\n\n# \u200b\u751f\u6210\u200b\u79c1\u9470\u200b\n# generate private key\nopenssl genrsa -out=server_key.pem 2048\n\n# \u200b\u751f\u6210\u200b CSR\nopenssl req -sha256 -new -subj \"/CN=Server Cert/C=HK/L=Hong Kong\" \\\n-key=server_key.pem -out=server_csr.pem\n\n# \u200b\u7c3d\u767c\u200b\u4f3a\u670d\u5668\u200b\u6191\u8b49\u200b\n# issue server cert with intermediate ca\nopenssl x509 -req -days=365 -CAserial=inter_ca_srl.txt \\\n-CA=inter_ca_crt.pem \\-CAkey=inter_ca_key.pem \\\n-extfile=server_ext.cnf -extensions=server_ext \\\n-in=server_csr.pem -out=server_crt.pem\n\n# \u200b\u6aa2\u67e5\u200b\u6191\u8b49\u200b\u8a0a\u606f\u200b\n# check cert info\nopenssl x509 -in server_crt.pem -text\n</code></pre>","tags":["openssl","tls"]},{"location":"blog/openssl-create-cert/#generate-client-cert","title":"\u751f\u6210\u200b\u5ba2\u6236\u7aef\u200b\u6191\u8b49\u200b Generate Client Cert","text":"<pre><code># \u200b\u6191\u8b49\u200b\u914d\u7f6e\u200b\n# cert config\ntee client_ext.cnf &lt;&lt;EOF\n[client_ext]\nsubjectKeyIdentifier    = hash\nauthorityKeyIdentifier  = keyid,issuer\nbasicConstraints        = critical, CA:FALSE\nkeyUsage                = critical, nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage        = critical, clientAuth\nEOF\n\n# \u200b\u751f\u6210\u200b\u79c1\u9470\u200b\n# generate private key\nopenssl genrsa -out=client_key.pem 2048\n\n# \u200b\u751f\u6210\u200b CSR\nopenssl req -sha256 -new -subj \"/CN=Client Cert/C=HK/L=Hong Kong\" \\\n-key=client_key.pem -out=client_csr.pem\n\n# \u200b\u7c3d\u767c\u200b\u5ba2\u6236\u7aef\u200b\u6191\u8b49\u200b\n# issue client cert with intermediate ca\nopenssl x509 -req -days=365 -CAserial=inter_ca_srl.txt \\\n-CA=inter_ca_crt.pem \\-CAkey=inter_ca_key.pem \\\n-extfile=client_ext.cnf -extensions=client_ext \\\n-in=client_csr.pem -out=client_crt.pem\n\n# \u200b\u6aa2\u67e5\u200b\u6191\u8b49\u200b\u8a0a\u606f\u200b\n# check cert info\nopenssl x509 -in client_crt.pem -text\n</code></pre>","tags":["openssl","tls"]},{"location":"blog/openssl-create-cert/#_3","title":"\u5176\u4ed6\u200b\u5be6\u7528\u200b\u547d\u4ee4","text":"","tags":["openssl","tls"]},{"location":"blog/openssl-create-cert/#_4","title":"\u4e0b\u8f09\u200b\u4f3a\u670d\u5668\u200b\u6191\u8b49","text":"<pre><code>echo -n | openssl s_client -connect www.google.com:443 | openssl x509 &gt; google_crt.pem\n</code></pre>","tags":["openssl","tls"]},{"location":"blog/openssl-create-cert/#_5","title":"\u4e0b\u8f09\u200b\u6191\u8b49\u200b\u93c8","text":"<pre><code>openssl s_client -showcerts -verify 5 -connect www.google.com:443 &lt; /dev/null | awk '/BEGIN CERTIFICATE/,/END CERTIFICATE/{ if(/BEGIN CERTIFICATE/){a++}; out=\"cert_chain.pem\"; print &gt;out}'\n</code></pre>","tags":["openssl","tls"]},{"location":"blog/openssl-create-cert/#_6","title":"\u589e\u52a0\u200b\u4fe1\u4efb\u200b\u6191\u8b49","text":"<p>ubuntu</p> <pre><code>sudo apt-get install -y ca-certificates\nsudo cp ca.crt /usr/local/share/ca-certificates\nsudo update-ca-certificates\n</code></pre> <p>powershell</p> <pre><code>Import-Certificate -FilePath \"C:\\crt.pem\" -CertStoreLocation cert:\\CurrentUser\\Root\nImport-Certificate -FilePath \"C:\\crt.pem\" -CertStoreLocation Cert:\\LocalMachine\\Root\n</code></pre> <p>docker ubuntu container</p> <pre><code>docker run --rm -it \\\n-v=/my_certs/root_crt.pem:/etc/ssl/certs/root_crt.pem \\\nwbitt/network-multitool bash\n</code></pre>","tags":["openssl","tls"]},{"location":"blog/openssl-create-cert/#_7","title":"\u52a0\u5bc6\u200b/\u200b\u89e3\u5bc6\u200b\u79c1\u9470","text":"<pre><code># \u200b\u751f\u6210\u200b RSA \u200b\u79c1\u9470\u200b\nopenssl genrsa -out=rsa_key.pem 2048\n# \u200b\u5c07\u200b\u79c1\u9470\u200b\u8f49\u63db\u200b pkcs8 \u200b\u683c\u5f0f\u200b\nopenssl pkcs8 -topk8 -in rsa_key.pem     -out key.pem         -nocrypt\n# \u200b\u52a0\u5bc6\u200b\u79c1\u9470\u200b\nopenssl pkcs8 -topk8 -in key.pem         -out key_encrypt.pem\n# \u200b\u89e3\u5bc6\u200b\u79c1\u9470\u200b\nopenssl pkcs8 -topk8 -in key_encrypt.pem -out key_decrypt.pem\n</code></pre>","tags":["openssl","tls"]},{"location":"blog/openssl-create-cert/#_8","title":"\u683c\u5f0f\u200b\u8f49\u63db","text":"<pre><code>## \u200b\u751f\u6210\u200b\u81ea\u200b\u7c3d\u8b49\u200b\u66f8\u200b\nopenssl req -x509 -nodes -newkey rsa:2048 -subj='/CN=Self Sign Cert' -out=crt.pem -keyout=key.pem\n\n## PEM \u200b\u8f49\u200b PFX\nopenssl pkcs12 -in=crt.pem -inkey=key.pem -export -out=crt.pfx\n## PFX \u200b\u8f49\u200b PEM\nopenssl pkcs12 -in=crt.pfx -out=crt_key.pem -nodes\n\n## PEM \u200b\u8f49\u200b DER\nopenssl x509 -outform der -in crt.pem -out crt.der\n## DER \u200b\u8f49\u200b PEM\nopenssl x509 -inform der  -in crt.der -out crt_from_der.pem\n\n## PKCS#8 \u200b\u8f49\u200b PKCS#1\nopenssl rsa -in key.pem -out key_pkcs1.pem\n</code></pre>","tags":["openssl","tls"]},{"location":"blog/openssl-create-cert/#_9","title":"\u53c3\u8003\u8cc7\u6599","text":"<ul> <li>https://www.openssl.org/docs/man1.1.1/man1/</li> <li>https://www.openssl.org/docs/man1.1.1/man5/x509v3_config.html</li> <li>https://datatracker.ietf.org/doc/html/rfc5280</li> <li>https://en.wikipedia.org/wiki/PKCS</li> </ul>","tags":["openssl","tls"]},{"location":"blog/deploy-my-resume-html-page-to-cloudflare/","title":"Deploy my resume html page to cloudflare","text":"<p>I will show you how i create my resume page and deploy to cloudflare pages. Here is my live resume https://resume.isaacyip.com/.</p> <ol> <li>Create a repo with your resume html page on github. You can fork my repo here</li> <li>Buy a domain name in cloudflare.</li> <li>Once you bought a domain, login cloudflare, goto <code>Pages &gt; Create project &gt; Connect to Git</code> </li> <li>Add your github account and select your resume repository.    </li> <li>since cloudflare only take <code>index.html</code> as default page, we will rename our resume html file to <code>index.html</code> in build command.    </li> <li>When the build success you can see your website on the url. Then click <code>Continue to project</code>.    </li> <li>Setup your domain name for the page.     </li> <li>Wait a few minutes, until the domain turn to Active, then you can access your resume page with your domain    </li> </ol>","tags":["cloudflare-pages","cloudflare","resume"]},{"location":"blog/setup-gitlab-runner-with-cacheable-dind/","title":"setup gitlab runner with cacheable docker executor","text":"<p>When using gitlab ci, it always take a long time to build docker image because cache is not used. Here is how to setup executer using local cache to speedup build time.</p>","tags":["gitlab","gitlab-runner","gitlab-ci","devops","ci-cd"]},{"location":"blog/setup-gitlab-runner-with-cacheable-dind/#when-do-you-need-this","title":"When do you need this?","text":"<p>If you have a standalone server that only used for gitlab runner, Shell Executor orUse Docker socket binding should be enough for you. You can skip this article.</p> <p>If you can bear few minutes build time, just use kaniko or Use Docker-in-Docker.</p> <p>Keep watching if you don't want to use socket binding or shell executor and want to reduce docker build time from few minutes to few seconds.</p>","tags":["gitlab","gitlab-runner","gitlab-ci","devops","ci-cd"]},{"location":"blog/setup-gitlab-runner-with-cacheable-dind/#setup-gitlag-runner","title":"Setup GitLag Runner","text":"<ol> <li> <p>get registation token from gitlab admin panel, <code>/admin/runners</code></p> </li> <li> <p>set var</p> </li> </ol> <pre><code>GITLAB_HOST=192.168.0.11\nGITLAB_PORT=443\nGITLAB_URL=\"https://${GITLAB_HOST}:${GITLAB_PORT}/\"\nREGISTRATION_TOKEN=\"xxxxxxxxxxxxx\"\n\nHARBOR_HOST=192.168.0.12\nHARBOR_PORT=443\n\nDEPLOY_FOLDER=/srv/gitlab-runner\n</code></pre> <ol> <li>perpare file ane folder</li> </ol> <pre><code>mkdir -p ${DEPLOY_FOLDER}\nmkdir -p ${DEPLOY_FOLDER}/config\nmkdir -p ${DEPLOY_FOLDER}/config/certs\ncd ${DEPLOY_FOLDER}\n\n# download gitlab server certificate\nopenssl s_client -showcerts -connect ${GITLAB_HOST}:${GITLAB_PORT} &lt; /dev/null 2&gt;/dev/null | sudo openssl x509 -outform PEM &gt; ${DEPLOY_FOLDER}/config/certs/${GITLAB_HOST}.crt\n\n# download harbor server certificate\nopenssl s_client -showcerts -connect ${HARBOR_HOST}:${HARBOR_PORT} &lt; /dev/null 2&gt;/dev/null | sudo openssl x509 -outform PEM &gt; ${DEPLOY_FOLDER}/${HARBOR_HOST}.crt\n</code></pre> <ol> <li>register gitlab runner and generate config file</li> </ol> <pre><code>sudo docker run --rm -v ${DEPLOY_FOLDER}/config:/etc/gitlab-runner/ docker.io/gitlab/gitlab-runner:v15.8.2 register \\\n --non-interactive \\\n --tag-list=\"dind-runner\" \\\n --name=\"dind-runner\" \\\n --executor \"docker\" \\\n --docker-image \"docker:23\" \\\n --docker-tlsverify=\"false\" \\\n --run-untagged=\"true\" \\\n --custom_build_dir-enabled \\\n --builds-dir=\"/builds\" \\\n --docker-volumes=\"/builds:/builds\" \\\n --env='GIT_CLONE_PATH=$CI_BUILDS_DIR/$CI_CONCURRENT_ID/$CI_PROJECT_NAME' \\\n --cache-dir=\"/cache\" \\\n --docker-volumes=\"/cache:/cache\" \\\n --docker-volumes=\"/var/run/docker.sock:/var/run/docker.sock\" \\\n --docker-volumes=\"/etc/docker/certs.d:/etc/docker/certs.d\" \\\n --url=\"${GITLAB_URL}\" \\\n --registration-token=\"${REGISTRATION_TOKEN}\"\n</code></pre> <ol> <li>update concurrent to 10</li> </ol> <pre><code>sudo sed -i 's/concurrent.*/concurrent = 10/' ${DEPLOY_FOLDER}/config/config.toml\n</code></pre> <ol> <li>create docker-compose file</li> </ol> <pre><code>echo \"\nservices:\n  dind:\n    container_name: dind\n    image: docker:23-dind\n    restart: always\n    privileged: true\n    environment:\n      # force docker deamon to disable TLS\n      DOCKER_TLS_CERTDIR: ''\n    command:\n      - --storage-driver=overlay2\n    networks:\n      - gitlab-runner\n    volumes:\n      - ${DEPLOY_FOLDER}/${HARBOR_HOST}.crt:/etc/docker/certs.d/${HARBOR_HOST}/ca.crt\n\n  runner:\n    container_name: runner\n    restart: always\n    image: docker.io/gitlab/gitlab-runner:v15.8.2\n    depends_on:\n      - dind\n    environment:\n      - DOCKER_HOST=tcp://dind:2375\n    volumes:\n      - ${DEPLOY_FOLDER}/config:/etc/gitlab-runner\n    networks:\n      - gitlab-runner\n\nnetworks:\n  gitlab-runner: {}\n\" &gt; ${DEPLOY_FOLDER}/docker-compose.yml\n</code></pre> <ol> <li>start container <code>cd ${DEPLOY_FOLDER} &amp;&amp; docker compose up -d --wait</code></li> <li>view logs <code>docker compose logs -n 100 -f</code></li> </ol> <p>you can download single script file here</p>","tags":["gitlab","gitlab-runner","gitlab-ci","devops","ci-cd"]},{"location":"blog/setup-gitlab-runner-with-cacheable-dind/#create-gitlab-ci-file","title":"create gitlab-ci file","text":"<p>create <code>.gitlab-ci.yml</code> file in your git project and commit, it will trigger pipline</p> <pre><code>build-docker-image:\n  stage: deploy\n  tags:\n    - docker-dind-runner\n  variables:\n    CI_REGISTRY: 192.168.0.12:443\n    CI_REGISTRY_USER: admin\n    CI_REGISTRY_PASSWORD: xxxxxxxx\n  script:\n    - docker login -u \"$CI_REGISTRY_USER\" -p \"$CI_REGISTRY_PASSWORD\" $CI_REGISTRY\n    - docker build . -t \"${CI_REGISTRY}/apps/${CI_PROJECT_PATH_SLUG}:latest\" --build-arg BUILDKIT_INLINE_CACHE=1\n    - docker push \"${CI_REGISTRY}/apps/${CI_PROJECT_PATH_SLUG}:latest\"\n</code></pre> <p> I am using a new dotnet webapi as demo, the first build takes 01:18 but second build only take 18s with code update. As long as you don't update <code>.csproj</code> file, you can use docker build layer local cache.</p> <p>you can watch job container created inside dind container when trigger job</p> <pre><code>docker exec -t dind watch -n 1 docker ps\n</code></pre> <p></p> <p>also setup crontab to clearup every month prevent disk full</p> <pre><code>(crontab -l &amp;&amp; echo \"0 0 1 * *  docker exec dind docker system prune --all --force --filter 'until=168h'\") | crontab -\n(crontab -l &amp;&amp; echo \"0 0 1 * *  docker exec dind docker system prune --all --force --volumes\") | crontab -\ncrontab -l\n</code></pre>","tags":["gitlab","gitlab-runner","gitlab-ci","devops","ci-cd"]},{"location":"blog/ssh---%E4%BD%BF%E7%94%A8%E7%A7%81%E9%8C%80%E7%99%BB%E5%85%A5/","title":"SSH - \u200b\u4f7f\u7528\u200b\u79c1\u200b\u9300\u200b\u767b\u200b\u5165","text":"<p>\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\u79c1\u200b\u9300\u200b\u767b\u200b\u5165\u200b  Linux</p> <ol> <li>\u200b\u751f\u6210\u200b\u4e00\u5c0d\u200b\u516c\u9470\u200b\u548c\u200b\u79c1\u9470\u200b</li> </ol> <pre><code># works on linux and windows\nssh-keygen\nls ~/.ssh\n</code></pre> <p>\u200b\u9810\u8a2d\u200b\u751f\u6210\u200b\u5728\u200b ~/.ssh\uff0cid_rsa \u200b\u662f\u200b\u79c1\u9470\u200b\uff0cid_rsa.pub \u200b\u662f\u200b\u516c\u9470\u200b</p> <p>id_rsa id_rsa.pub</p> <ol> <li>\u200b\u4e0a\u50b3\u200b\u516c\u9470\u200b\u5230\u200b\u4f3a\u670d\u5668\u200b</li> </ol> <pre><code># only for linux\nssh-copy-id username@remote_host\n</code></pre> <p>\u200b\u5982\u679c\u200b\u4f7f\u7528\u200b windows\uff0c\u200b\u6253\u958b\u200b cmd\uff0c\u200b\u4f7f\u7528\u200b scp \u200b\u4e0a\u50b3\u200b\u91d1\u9470\u200b</p> <pre><code># only for cmd\nscp %USERPROFILE%/.ssh/id_rsa.pub isaac@192.168.0.100:~/tmpe_id_rsa.pub\nssh isaac@192.168.0.100 \"mkdir -p ~/.ssh &amp;&amp; cat ~/tmpe_id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; rm ~/tmpe_id_rsa.pub\"\n</code></pre> <p>\u200b\u4ee5\u4e0a\u200b\u547d\u4ee4\u200b\u6703\u200b\u628a\u200b\u516c\u9470\u200b\u4e0a\u200b\u50b3\u5230\u200b\u4f3a\u670d\u5668\u200b\u7684\u200b\u6a94\u6848\u200b <code>~/.ssh/authorized_keys</code>\u3002</p> <p>3.\u200b\u73fe\u5728\u200b\u767b\u5165\u200b\u4e0d\u7528\u200b\u5bc6\u78bc\u200b\u4e86\u200b</p> <pre><code>ssh isaac@192.168.0.100\n</code></pre>","tags":["ssh","linux"]},{"location":"blog/what-is-these-docker-tags-mean-bullseye-slim-alpine-jammy/","title":"what is these docker tags mean (bullseye, slim, alpine, jammy)?","text":"<p>When first time seeing all this docker tag, i am very confused about what is these tag and which should i pick. Here i write down some tag that i know.</p> <p>Most of these tag represent different versions of linux such as debian, ubuntu, alpine.</p>","tags":["docker","docker-tag"]},{"location":"blog/what-is-these-docker-tags-mean-bullseye-slim-alpine-jammy/#alpine","title":"Alpine","text":"<p>Alpine is a extremely small size of linux that is only about 7 MB. You can see their about page here.</p>","tags":["docker","docker-tag"]},{"location":"blog/what-is-these-docker-tags-mean-bullseye-slim-alpine-jammy/#debian-and-ubuntu","title":"Debian and Ubuntu","text":"<p>Debian and Ubuntu use diff code name for diff os versions, you can see full code name here : Debian, Ubuntu</p>","tags":["docker","docker-tag"]},{"location":"blog/what-is-these-docker-tags-mean-bullseye-slim-alpine-jammy/#debian-code-name","title":"Debian code name","text":"os version code name 11 bullseye 10 buster 9 stretch 8 jessie","tags":["docker","docker-tag"]},{"location":"blog/what-is-these-docker-tags-mean-bullseye-slim-alpine-jammy/#slim-slimmer","title":"slim (slimmer)","text":"<p><code>slim</code> is a smaller size of Debian Linux, it removed some packages normally not necessary within containers. It must come with one of debian release code like <code>:bullseye-slim</code> You can see description in dockerhub https://hub.docker.com/_/debian Size different here:</p> <pre><code>REPOSITORY   TAG             IMAGE ID       SIZE\ndebian       bullseye-slim   9f61210833de   80.5MB\ndebian       bullseye        5c8936e57a38   124MB\n</code></pre>","tags":["docker","docker-tag"]},{"location":"blog/what-is-these-docker-tags-mean-bullseye-slim-alpine-jammy/#ubuntu-code-name","title":"Ubuntu code name","text":"os version code name Ubuntu 22.04 LTS jammy Ubuntu 20.04 LTS focal Ubuntu 18.04 LTS bionic Ubuntu 16.04 LTS xenial Ubuntu 14.04 LTS trusty","tags":["docker","docker-tag"]},{"location":"blog/what-is-these-docker-tags-mean-bullseye-slim-alpine-jammy/#rc-release-candidates","title":"rc (Release Candidates)","text":"<p><code>rc</code> is a pre-release version that is not stable yet but close to release.</p>","tags":["docker","docker-tag"]},{"location":"blog/what-is-these-docker-tags-mean-bullseye-slim-alpine-jammy/#ltsc-long-term-servicing-channel","title":"ltsc (Long Term Servicing Channel)","text":"<p><code>ltsc</code> means stable version of windows server, you can see it on dotnet image</p>","tags":["docker","docker-tag"]},{"location":"cheat_sheets/error_cheat_sheet/","title":"Errors","text":"","tags":["error","cheat-sheet"]},{"location":"cheat_sheets/error_cheat_sheet/#the-configured-user-limit-128-on-the-number-of-inotify-instances-has-been-reached","title":"The configured user limit (128) on the number of inotify instances has been reached","text":"<p>Unhandled exception. System.IO.IOException: The configured user limit (128) on the number of inotify instances has been reached, or the per-process limit on the number of open file descriptors has been reached.</p> <p>this error occurred when deploy too mush host application solution below</p> <pre><code>echo \"fs.inotify.max_user_instances = 1024\" | sudo tee /etc/sysctl.d/fs__inotify__max_user_instances.conf\nsudo sysctl --system\nsysctl fs.inotify.max_user_instances\n</code></pre>","tags":["error","cheat-sheet"]},{"location":"cheat_sheets/k8s_cheat_sheet/","title":"K8S Cheat Sheet","text":"","tags":["k8s","kubernetes","cheat-sheet"]},{"location":"cheat_sheets/k8s_cheat_sheet/#kubernetes","title":"Kubernetes","text":"<ul> <li>official cheat sheet</li> <li>kubectl</li> <li>go template url</li> </ul> <pre><code># kubectl exec one of deployment pod\nkubectl exec -it deploy/my-app -n bes -- bash\n\n# kubectl get all resource includeing custom resource\nkubectl get $(kubectl api-resources --namespaced=true --no-headers -o name | grep -v -E 'events|bindings$|localsubjectaccessreviews' | paste -s -d, - )\n\n# kubectl show pod cpu and memory config of first container\nkubectl get pod -o custom-columns=POD_NAME:.metadata.name,CONTAINER:.spec.containers[0].name,CPU_MIN:.spec.containers[0].resources.limits.cpu,CPU_MAX:.spec.containers[0].resources.requests.cpu,MEM_MAX:.spec.containers[0].resources.limits.memory,MEM_MIN:.spec.containers[0].resources.requests.memory,STATUS:.status.phase\n\n# kubectl list all nodeport\nkubectl get svc --all-namespaces -o go-template='{{range .items}}{{ $svc := . }}{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{\",\"}}{{if .name}}{{printf \"%-10s\" .name}}{{else}}{{printf \"%-10s\" \"\"}}{{end}}{{\",\"}}{{$svc.metadata.namespace}}{{\",\"}}{{$svc.metadata.name}}{{\"\\n\"}}{{end}}{{end}}{{end}}'\n\n# backup etcd data\nsudo ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/apiserver-etcd-client.crt \\\n  --key=/etc/kubernetes/pki/apiserver-etcd-client.key \\\n  snapshot save ~/etcd_backup\n\n# view container log\nsudo docker logs -n 100 -f $(sudo docker ps -f name=k8s_kube-vip -q)\nsudo docker logs -n 100 -f $(sudo docker ps -f name=k8s_etcd -q)\nsudo docker logs -n 100 -f $(sudo docker ps -f name=k8s_kube-apiserver -q)\nsudo docker logs -n 100 -f $(sudo docker ps -f name=k8s_kube-scheduler -q)\nsudo docker logs -n 100 -f $(sudo docker ps -f name=k8s_kube-controller-manager -q)\n</code></pre>","tags":["k8s","kubernetes","cheat-sheet"]},{"location":"cheat_sheets/k8s_cheat_sheet/#kubernetes-create-nodeport-svc","title":"Kubernetes - create nodeport svc","text":"<pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-svc\n  namespace: default\nspec:\n  ports:\n    - port: 80\n      nodePort: 30002\n  selector:\n    app: my-app\n  type: NodePort\nEOF\n</code></pre>","tags":["k8s","kubernetes","cheat-sheet"]},{"location":"cheat_sheets/k8s_cheat_sheet/#kubernetes-create-kubeconfig-file","title":"Kubernetes - Create kubeconfig file","text":"<pre><code>NAMESPACE=default\nUSER_NAME=my-user\n\nUSER_TOKEN_NAME=$(kubectl get serviceaccount ${USER_NAME} -n ${NAMESPACE} -o=jsonpath='{.secrets[0].name}')\nUSER_TOKEN_VALUE=$(kubectl get secret/${USER_TOKEN_NAME} -n ${NAMESPACE} -o=go-template='{{.data.token}}' | base64 --decode)\nCURRENT_CONTEXT=$(kubectl config current-context)\nCURRENT_CLUSTER=$(kubectl config view --raw -o=go-template='{{range .contexts}}{{if eq .name \"'''${CURRENT_CONTEXT}'''\"}}{{ index .context \"cluster\" }}{{end}}{{end}}')\nCLUSTER_CA=$(kubectl config view --raw -o=go-template='{{range .clusters}}{{if eq .name \"'''${CURRENT_CLUSTER}'''\"}}\"{{with index .cluster \"certificate-authority-data\" }}{{.}}{{end}}\"{{ end }}{{ end }}')\nCLUSTER_SERVER=$(kubectl config view --raw -o=go-template='{{range .clusters}}{{if eq .name \"'''${CURRENT_CLUSTER}'''\"}}{{ .cluster.server }}{{end}}{{ end }}')\n\nsudo tee ${USER_NAME}.kubeconfig &lt;&lt;EOF\napiVersion: v1\nkind: Config\ncurrent-context: ${CURRENT_CONTEXT}\ncontexts:\n- name: ${CURRENT_CONTEXT}\n  context:\n    cluster: ${CURRENT_CONTEXT}\n    user: ${USER_NAME}\n    namespace: ${NAMESPACE}\nclusters:\n- name: ${CURRENT_CONTEXT}\n  cluster:\n    certificate-authority-data: ${CLUSTER_CA}\n    server: ${CLUSTER_SERVER}\nusers:\n- name: ${USER_NAME}\n  user:\n    token: ${USER_TOKEN_VALUE}\nEOF\n\nkubectl get pods -n ${NAMESPACE} --kubeconfig=${USER_NAME}.kubeconfig\n</code></pre>","tags":["k8s","kubernetes","cheat-sheet"]},{"location":"cheat_sheets/k8s_cheat_sheet/#helm","title":"Helm","text":"<pre><code># download helm chart\nhelm pull bitnami/redis --untar --untardir ./redis-helm-charts\n\n# render helm template\nhelm template my-redis bitnami/redis --output-dir=./otuput-dir --dry-run -f=\"my-values.yaml\"\n\n# ls installed app\nhelm ls -A\n\n# get installed values\nhelm get values my-redis -n redis\n</code></pre>","tags":["k8s","kubernetes","cheat-sheet"]},{"location":"cheat_sheets/k8s_cheat_sheet/#helm-chart","title":"Helm chart","text":"<pre><code># add checksum to auto update deployment yaml if config map is changed\nannotations:\n  checksum/configmap: { { include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum } }\n\n# print yaml with nindent in every line\n{{- toYaml .Values.resources | nindent 12 }}\n\n# if else\n{{- if .Values.enabled }}\n{{- else }}\n{{- end }}\n\n# redefine root var in scrope\n{{- with .Values.nodeSelector }}\n      nodeSelector:\n{{- toYaml . | nindent 8 }}\n{{- end }}\n\n# avoid null error\n{{- if (.Values.pvc).enabled -}}{{- end -}}\n\n# rename var\n{{- $ingressPath := .Values.ingress.path -}}\n\n# prefer deploy pod in diff node\naffinity:\n  podAntiAffinity:\n    preferredDuringSchedulingIgnoredDuringExecution:\n    - weight: 100\n      podAffinityTerm:\n        labelSelector:\n          matchLabels:\n            app: \"{{ $name }}\"\n        topologyKey: \"kubernetes.io/hostname\"\n\n# loop key value\n{{- range $key, $value := .Values.config }}\n{{- if and (ne $key \"my_key\") }}\n  {{ $key }}: \"{{ $value }}\"\n{{- end }}\n\n# base64 encode for secret\n{{ $value | b64enc }}\n\n# default value\n{{ $service.type | default \"ClusterIP\" }}\n</code></pre> <pre><code># add config as json file or key value\n{{- if .Values.config }}\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: dotnet-config-cm\ndata:\n\n{{- $config_json := .Values.config.config_json -}}\n{{- if $config_json }}\n  config.json: |\n{{ $config_json | indent 4 }}\n{{- end }}\n\n{{- range $key, $value := .Values.config_key_value }}\n  {{ $key }}: \"{{ $value }}\"\n{{- end }}\n\n{{- end }}\n</code></pre> <pre><code># distribute pod into diff node\n# pod.spec.\naffinity:\n  podAntiAffinity:\n    preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 100\n        podAffinityTerm:\n          labelSelector:\n            matchLabels:\n              app: \"{{ $app_name }}\"\n          topologyKey: \"kubernetes.io/hostname\"\n</code></pre>","tags":["k8s","kubernetes","cheat-sheet"]},{"location":"cheat_sheets/k8s_cheat_sheet/#argocd","title":"ArgoCD","text":"<p>Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd/</p> <pre><code># get init admin password\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d; echo\n\n# create container\ndocker run --rm -it argoproj/argocd\n\n# login\nargocd login \"192.168.0.1\" --insecure --username \"isaac\" --password \"xxxxxx\"\n\n# restart deployment\nargocd app actions run \"my-app\" restart --kind Deployment\n\n# update password\nargocd account update-password --account admin\n\n# set app param\nkubectl patch Application --type=merge -n=argocd -p '{\"spec\":{\"source\":{\"helm\":{\"parameters\":[{\"name\":\"replicaCount\",\"value\":\"0\"}]}}}}' my-app\n\n# set app param2\nkubectl exec deploy/argocd-server -n argocd -- bash -c \"argocd login 127.0.0.1:8080 --insecure --username admin --password 'XXXXXX'\"\nkubectl exec deploy/argocd-server -n argocd -- bash -c \"argocd app set my-app -p replicaCount=0\"\n</code></pre>","tags":["k8s","kubernetes","cheat-sheet"]},{"location":"cheat_sheets/linux_cheat_sheet/","title":"Linux Cheat Sheet","text":"<p>My linux cheat Sheet base on Ubuntu</p>","tags":["linux","cheat-sheet"]},{"location":"cheat_sheets/linux_cheat_sheet/#basic","title":"basic","text":"<pre><code># create multi line file\ncat &lt;&lt;EOT &gt; multi_line_file.txt\nline1\nline2\nEOT\n\n# create multi line file with tee\nsudo tee -a ~/.ssh/config &lt;&lt; EOF\nHost localhost\n  ForwardAgent yes\nEOF\n\n# check memory usage\nhtop\nfree -h\n</code></pre>","tags":["linux","cheat-sheet"]},{"location":"cheat_sheets/linux_cheat_sheet/#awk","title":"awk","text":"<pre><code># skip first line, useful for skip colume name\nawk 'NR!=1 {print}'\n# filter when colume one not match regex pattern\nawk '$1 !~ /^some-regex-pattern$/ {print}')\n# print colume 1, 2 and added \"|\" in between\nawk '{print $1\"|\"$2}')\n# print with right padding space\nawk '{printf \"%-20s %-20s\\n\",$1,$2}'\n</code></pre>","tags":["linux","cheat-sheet"]},{"location":"cheat_sheets/linux_cheat_sheet/#ssh","title":"ssh","text":"<pre><code># gen key pair (id_rsa, id_rsa.pub) in folder `/home/admin/.ssh/`\nssh-keygen\n\n# upload key for login (append key to user@remote_host:~/.ssh/authorized_keys)\nssh-copy-id user@remote_host\n\n# ssh tunnel\nssh user@remote_host -L &lt;local_port&gt;:&lt;target_host&gt;:&lt;target_port&gt;\n\n# scp upload folder\nscp -r \"~/some_folder\" user@remote_host:~/\n</code></pre>","tags":["linux","cheat-sheet"]},{"location":"cheat_sheets/linux_cheat_sheet/#sync-time-with-hk-ntp-server","title":"sync time with hk ntp server","text":"<pre><code># create config file\nmkdir -p /etc/systemd/timesyncd.conf.d/\ncat &lt;&lt;EOT &gt; /etc/systemd/timesyncd.conf.d/hk_ntp.conf\n[Time]\nNTP=stdtime.gov.hk\nEOT\n# set timezone\ntimedatectl set-timezone 'Asia/Hong_Kong'\n# restart timesyncd service\nsystemctl restart systemd-timesyncd\n\n# check status\ntimedatectl timesync-status\ntimedatectl show-timesync\n</code></pre> <p>IPv6 users may also access NTP service through <code>time.hko.hk</code></p> <ul> <li>ref: https://man7.org/linux/man-pages/man5/timesyncd.conf.d.5.html</li> <li>ref: https://www.hko.gov.hk/en/nts/ntime.htm</li> </ul>","tags":["linux","cheat-sheet"]},{"location":"cheat_sheets/linux_cheat_sheet/#add-apt-repo","title":"add apt repo","text":"<pre><code># add repo\necho \"deb http://tw.archive.ubuntu.com/ubuntu/ jammy main\" &gt; /etc/apt/sources.list.d/apt_tw_mirror.list\napt update\n</code></pre> <p><code>deb [ option1=value1 option2=value2 ] uri suite [component1] [component2] [...]</code></p> <ul> <li><code>deb</code>: <code>deb</code> or <code>deb-src</code>, deb-src means include source code, only used when you want to modify source code</li> <li><code>uri</code>: repo uri, launchpad provides some repo here</li> <li><code>suite</code>: usually use ubuntu version code name here</li> <li><code>component</code>: usually have four option</li> <li>main - Officially supported software</li> <li>restricted - Supported software that is not available under a completely free license.</li> <li>universe - Community maintained software, i.e. not officially supported software.</li> <li>multiverse - Software that is not free</li> </ul> <ul> <li>ref: https://manpages.ubuntu.com/manpages/xenial/man5/sources.list.5.html</li> <li>ref: https://help.ubuntu.com/community/Repositories/Ubuntu</li> </ul>","tags":["linux","cheat-sheet"]},{"location":"cheat_sheets/linux_cheat_sheet/#extend-disk-size","title":"extend disk size","text":"<pre><code># check total dir size\ndu -sh /var/*\n\n# check disk size\ndf -h\n\n# expand vm linux disk\nsudo apt install parted\nsudo parted -l\n(parted) resizepart 1 100%\n(parted) quit\nsudo resize2fs /dev/sda\n</code></pre>","tags":["linux","cheat-sheet"]},{"location":"cheat_sheets/linux_cheat_sheet/#extend-disk-size-with-logical-volume-manager","title":"extend disk size (with logical volume manager)","text":"<pre><code># ref: https://packetpushers.net/ubuntu-extend-your-default-lvm-space/\n\n# rescan disk size\necho 1 | sudo tee /sys/class/block/sda/device/rescan\n\n# resize disk\nsudo cfdisk # step: resize &gt; write &gt; quit\n\n# resize pv\nsudo pvresize /dev/sda3\n\n# extend logical volumes\nsudo lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv\n\n# display lv\nsudo lvdisplay\n\n# resize filesystem\nsudo resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv\n</code></pre>","tags":["linux","cheat-sheet"]},{"location":"cheat_sheets/linux_cheat_sheet/#disable-swap-and-kswapd0","title":"disable swap and kswapd0","text":"<pre><code># edit file `/etc/fstab` and comment swap line\nsudo vim /etc/fstab\n## /swap.img       none    swap    sw      0       0\n\n# turnoff swap\nswapoff -a\n\n# checking\nfree -h\n\n# 0 swappiness really prevents from any swapping even if there is a swap storage available\necho 'vm.swappiness=0' | sudo tee /etc/sysctl.d/swappiness_zero.conf\n\n# reload all sysctl config\nsysctl --system\n\n# search swap unit\nsystemctl list-units *swap* --all\n\n# mask and stop swap unit permanently\nsystemctl mask swap.target\nsystemctl stop swap.target\n\n# verify\nfree -m\nsysctl vm.swappiness\nsystemctl status *swap* --all\n</code></pre> <p>ref: kernel swappiness</p>","tags":["linux","cheat-sheet"]},{"location":"cheat_sheets/linux_cheat_sheet/#find-command","title":"find command","text":"<pre><code># search log file\nfind /var/log -iname '*.log' -type f\n\n# search dir\nfind $HOME -iname 'php' -type d\n\n# search file bigger than 10MiB\nfind $HOME -type f -size +10M\n\n# search file created more than 7 days\nfind $HOME -type f -ctime +7\n\n# search file modified within 60 mins\nfind $HOME -type f -mmin -60\n\n# move\nfind $HOME -type f -name \"*.txt\" -exec move {} ./new_dir/ \\;\n</code></pre> <p>ref: Linux manual page - find</p>","tags":["linux","cheat-sheet"]},{"location":"cheat_sheets/linux_cheat_sheet/#archive-log-files","title":"archive log files","text":"<pre><code># zip log file\nfind /var/log -regextype posix-egrep -regex '.*/.*([0-9]{8})$' -exec gzip {} \\;\n\n# move ziped log files to other folder with same dir structure\nLOG_ARCHIVED_FOLDER=/mnt/data/log_archived/\ncd /var/log\nfind . -type d -exec mkdir -p \"$LOG_ARCHIVED_FOLDER/{}\" \\;\nfind . -type f -name '*.gz' -exec mv --backup \"{}\" \"$LOG_ARCHIVED_FOLDER/{}\" \\;\n</code></pre>","tags":["linux","cheat-sheet"]},{"location":"cheat_sheets/linux_cheat_sheet/#skip-sudo-password","title":"skip sudo password","text":"<pre><code>echo \"$USER ALL=(ALL) NOPASSWD: ALL\" | sudo tee /etc/sudoers.d/$USER\n</code></pre>","tags":["linux","cheat-sheet"]},{"location":"cheat_sheets/linux_cheat_sheet/#reference","title":"reference","text":"<ul> <li>The Linux Kernel</li> <li>Linux manual page</li> <li>Ubuntu Docs</li> </ul>","tags":["linux","cheat-sheet"]},{"location":"cheat_sheets/other_cheat_sheet/","title":"Other Cheat Sheet","text":"<p>My other cheat Sheet</p>","tags":["cheat-sheet"]},{"location":"cheat_sheets/other_cheat_sheet/#docker","title":"Docker","text":"<pre><code># remove image\ndocker image rm my-reg/my-image:latest\n\n# remove image with filter\ndocker image rm $(docker images --filter=reference='my-reg/*' --format \"{{.Repository}}:{{.Tag}}\")\n\n# add new tag\ndocker tag \"my-reg/my-image:latest\" \"my-reg/my-image:new-tag\"\n\n# docker save image as file\ndocker save -o \"my-image.tar\" \"my-reg/my-image:latest\"\n\n# docker load image file\ndocker load --input \"my-image.tar\"\n\n# rm all image that is not latest tag\ndocker image rm $(docker images | awk 'NR!=1 &amp;&amp; $2 !~ /&lt;none&gt;/ &amp;&amp; $2 !~ /^latest$)/ {print $1\":\"$2}')\n</code></pre>","tags":["cheat-sheet"]},{"location":"cheat_sheets/other_cheat_sheet/#mongodb","title":"mongodb","text":"<pre><code># backup database to file\nmongodump --uri=\"mongodb://admin:XXXXXW@192.168.0.101:10001,192.168.0.102:10002,192.168.0.103:10003/?authSource=admin&amp;replicaSet=my_replica_set&amp;readPreference=primary\" --out=mongodump/ --db=my_db\n\n# restore database from file\nmongorestore --uri=\"mongodb://admin:XXXXXW@192.168.0.101:10001,192.168.0.102:10002,192.168.0.103:10003/?authSource=admin&amp;replicaSet=my_replica_set&amp;readPreference=primary\" --db=my_db mongodump/my_db\n</code></pre>","tags":["cheat-sheet"]},{"location":"cheat_sheets/other_cheat_sheet/#minio-client","title":"minio-client","text":"<pre><code># create config file\nmkdir -p $HOME/.mc/\ntee $HOME/.mc/config.json &lt;&lt;EOF\n{\n  \"version\": \"10\",\n  \"aliases\": {\n    \"myminio\": {\n      \"url\": \"http://192.168.0.100:9000\",\n      \"accessKey\": \"xxxxxxxxxxxxxxxx\",\n      \"secretKey\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"api\": \"s3v4\",\n      \"path\": \"auto\"\n    }\n  }\n}\nEOF\n\n# upload files in /minio-tmp/* to minio server\ndocker run --rm -it --entrypoint='' \\\n-v /minio-tmp/:/minio-tmp/ \\\n-v $HOME/.mc/config.json:$HOME/.mc/config.json \\\nminio/mc \\\nsh -c 'mc cp /minio-tmp/* myminio/my-bucket'\n\n# delete files older than 7 days in minio server\ndocker run --rm -it --entrypoint='' \\\n-v $HOME/.mc/config.json:$HOME/.mc/config.json \\\nminio/mc \\\nsh -c 'mc find myminio/my-bucket --older-than 7d --exec 'mc rm {}''\n</code></pre>","tags":["cheat-sheet"]},{"location":"cheat_sheets/other_cheat_sheet/#jasper-report","title":"jasper report","text":"<pre><code># export\nJASPER_INSTALLED_PATH=/mnt/jasper/\ncd /${JASPER_INSTALLED_PATH}/buildomatic/\n./js-export.sh --everything --keyalias deprecatedImportExportEncSecret --output-zip /mnt/jasper_backup/jasper_full_backup_$(date +'%Y%m%d_%H%M').zip\n\n# crontab for backup every day and keep 7 days\n0 5 * * * find /mnt/jasper_backup/ -mtime +1 -name \"jasper_full_backup_*.zip\" -delete &amp;&amp; cd $JASPER_INSTALLED_PATH/buildomatic/ &amp;&amp; ./js-export.sh --everything --keyalias deprecatedImportExportEncSecret --output-zip /mnt/jasper_backup/jasper_full_backup_$(date +'%Y%m%d_%H%M').zip\n</code></pre>","tags":["cheat-sheet"]},{"location":"cheat_sheets/other_cheat_sheet/#tls-renew-ca-cert","title":"tls renew ca cert","text":"<pre><code># generate csr using public key and cert info from `root_ca.crt`\nopenssl x509 -x509toreq -in root_ca.crt -signkey root_ca.key -out new_root_ca.csr\n\n# sign new csr file with old private key and set expire date\nopenssl x509 -req -days 36500 -in new_root_ca.csr -signkey root_ca.key -out new_root_ca.crt\n</code></pre>","tags":["cheat-sheet"]},{"location":"cheat_sheets/other_cheat_sheet/#tls-cert-verify","title":"tls cert verify","text":"<pre><code># verify cert and key are match\nKEY_MD5=$(openssl rsa -noout -modulus -in root_ca.key | openssl md5 | cut -c 10-)\nCERT_MD5=$(openssl x509 -noout -modulus -in new_root_ca.crt | openssl md5 | cut -c 10-)\nif [ \"$KEY_MD5\" = \"$CERT_MD5\" ]; then echo \"match\"; else echo \"not match\"; fi\n\n# verify server cert is issuer by ca\nopenssl verify -CAfile ca.crt -verbose server.crt\n</code></pre>","tags":["cheat-sheet"]},{"location":"cheat_sheets/pulsar_cheat_sheet/","title":"apache pulsar cheat sheet","text":""},{"location":"cheat_sheets/pulsar_cheat_sheet/#create-namespace","title":"create namespace","text":"<pre><code>bin/pulsar-admin namespaces create my_tenant/my_namespace\n</code></pre>"},{"location":"cheat_sheets/pulsar_cheat_sheet/#create-partitioned-topic","title":"create partitioned topic","text":"<pre><code>bin/pulsar-admin topics create-partitioned-topic -p 6 persistent://my_tenant/my_namespace/my_topic\n</code></pre>"},{"location":"cheat_sheets/pulsar_cheat_sheet/#delete-topic","title":"delete topic","text":"<pre><code>bin/pulsar-admin topics delete-partitioned-topic --force persistent://my_tenant/my_namespace/my_topic\nbin/pulsar-admin topics delete --force persistent://my_tenant/my_namespace/my_topic\n\n# delete all non-partitioned topics\nfor one_topic in $(bin/pulsar-admin topics list \"my_tenant/my_namespace\"); do bin/pulsar-admin topics delete --force \"$one_topic\"; done\n# delete all partitioned topic\nfor one_topic in $(bin/pulsar-admin topics list-partitioned-topics \"my-tenant/my-namespace\"); do bin/pulsar-admin topics delete-partitioned-topics --force \"$one_topic\"; done\n</code></pre>"},{"location":"cheat_sheets/pulsar_cheat_sheet/#list-topic","title":"list topic","text":"<pre><code>bin/pulsar-admin topics list-partitioned-topics \"my_tenant/my_namespace\"\n</code></pre>"},{"location":"cheat_sheets/pulsar_cheat_sheet/#clear-backlog","title":"clear backlog","text":"<pre><code># clear for my_subscription under my_namespace in all topics\nbin/pulsar-admin namespaces clear-backlog \"my_tenant/my_namespace\" --force -s \"my_subscription\"\n\n# clear for topic\nbin/pulsar-admin topics clear-backlog \"persistent://my_tenant/my_namespace/my_topic\" --subscription \"my_subscription\";\n\n# loop all partitioned-topics in namespace and clear-backlog\nfor one_topic in $(bin/pulsar-admin topics list-partitioned-topics \"my_tenant/my_namespace\");\n    do (\n        for one_sub in $(bin/pulsar-admin topics subscriptions \"$one_topic\");\n            do bin/pulsar-admin topics clear-backlog $one_topic --subscription $one_sub; echo \"$one_topic : $one_sub\";\n        done\n        );\ndone\n</code></pre>"},{"location":"cheat_sheets/pulsar_cheat_sheet/#test-send-message","title":"test send message","text":"<pre><code>bin/pulsar-client produce my_tenant/my_namespace/my_topic  -m \"---------this is my message-------\"\n</code></pre>"},{"location":"cheat_sheets/pulsar_cheat_sheet/#skip-message","title":"skip message","text":"<pre><code>bin/pulsar-admin topics skip --count 1 --subscription my_subscription \"persistent://my_tenant/my_namespace/my_topic\"\n\n# skip all message in all non-partitioned topic in namespace\nfor one_topic in $(bin/pulsar-admin topics list \"my_tenant/my_namespace\");\n    do (\n        for one_sub in $(bin/pulsar-admin topics subscriptions \"$one_topic\");\n            do bin/pulsar-admin topics skip --count 9999999 --subscription $one_sub $one_topic; echo \"$one_topic : $one_sub\";\n        done\n        );\ndone\n</code></pre>"},{"location":"cheat_sheets/pulsar_cheat_sheet/#check-broker","title":"check broker","text":"<pre><code>bin/pulsar-admin brokers get-runtime-config\nbin/pulsar-admin brokers healthcheck\nbin/pulsar-admin broker-stats monitoring-metrics -i\nbin/pulsar-admin broker-stats topics -i\n</code></pre>"},{"location":"cheat_sheets/pulsar_cheat_sheet/#check-bookie","title":"check bookie","text":"<pre><code>curl http://localhost:8000/metrics | grep bookie\n</code></pre>"},{"location":"cheat_sheets/pulsar_cheat_sheet/#check-topic","title":"check topic","text":"<pre><code>bin/pulsar admin persistent stats-internal \"persistent://my_tenant/my_namespace/my_topic\"\n</code></pre>"},{"location":"cheat_sheets/pulsar_cheat_sheet/#delpoy-pulsar-manager-ui","title":"delpoy pulsar manager UI","text":"<pre><code>pulsar_broker_url=http://localhost:7750\ndocker pull apachepulsar/pulsar-manager:v0.3.0\ndocker run -it -d \\\n -p 9527:9527 -p 7750:7750 \\\n -e SPRING_CONFIGURATION_FILE=/mnt/pulsar/application.properties \\\n apachepulsar/pulsar-manager:v0.3.0\n\nCSRF_TOKEN=$(curl $pulsar_broker_url/pulsar-manager/csrf-token)\ncurl \\\n    -H \"X-XSRF-TOKEN: $CSRF_TOKEN\" \\\n    -H \"Cookie: XSRF-TOKEN=$CSRF_TOKEN;\" \\\n -H 'Content-Type: application/json' \\\n -X PUT $pulsar_broker_url/pulsar-manager/users/superuser \\\n -d '{\"name\": \"pulsar\", \"password\": \"pulsar\", \"description\": \"pulsar\", \"email\": \"pulsar@my_domain.com\"}'\n</code></pre>"},{"location":"cheat_sheets/pulsar_cheat_sheet/#kubectl-go-in-pulsar","title":"kubectl go in pulsar","text":"<pre><code>kubectl exec -i -t -n pulsar pulsar-broker-0 -c pulsar-broker -- sh -c \"clear; (bash || ash || sh)\"\n</code></pre>"},{"location":"linux/init_ubuntu/","title":"Init Ubuntu","text":"<p>A document of my Ubuntu init setup.</p>","tags":["linux"]},{"location":"linux/init_ubuntu/#versions","title":"versions","text":"Version OS Ubuntu 24.04.1 LTS (Noble Numbat) Docker 27.3.1 Docker Compose 2.29.7","tags":["linux"]},{"location":"linux/init_ubuntu/#allow-user-sudo-without-password","title":"allow user sudo without password","text":"<pre><code>echo \"${USER} ALL=(ALL) NOPASSWD: ALL\" | sudo tee /etc/sudoers.d/${USER}\n</code></pre>","tags":["linux"]},{"location":"linux/init_ubuntu/#config-system-ntp-time","title":"config system ntp time","text":"<pre><code># get available timezone list\n# timedatectl list-timezones\n\n# set timezone\ntimedatectl set-timezone \"Asia/Hong_Kong\"\n\n# set NTP source,\n# man page https://manpages.ubuntu.com/manpages/bionic/man5/timesyncd.conf.5.html\nsudo mkdir /etc/systemd/timesyncd.conf.d\nsudo tee /etc/systemd/timesyncd.conf.d/hk_ntp.conf &lt;&lt; EOF\n[Time]\nNTP=stdtime.gov.hk\nFallbackNTP=stdtime.gov.hk\nEOF\nsudo systemctl restart systemd-timesyncd\nsudo systemctl status systemd-timesyncd | grep Status\n</code></pre>","tags":["linux"]},{"location":"linux/init_ubuntu/#install-docker","title":"install docker","text":"<pre><code># Uninstall old versions\nfor pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done\n\n# Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\nARCH=$(dpkg --print-architecture)\nUBUNTU_CODE=$(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\")\necho \"deb [arch=${ARCH} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu ${UBUNTU_CODE} stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\nsudo apt-get update\n\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# config docker daemon\n# https://docs.docker.com/reference/cli/dockerd/#daemon-configuration-file\n</code></pre>","tags":["linux"]},{"location":"linux/init_ubuntu/#allow-docker-command-without-sudo","title":"allow docker command without sudo","text":"<pre><code># create linux user group name docker\nsudo groupadd docker\n# add user to group\nsudo usermod -aG docker $USER\n# refresh user group\nnewgrp docker\n# test\ndocker run hello-world\n</code></pre>","tags":["linux"]},{"location":"linux/init_ubuntu/#set-docker-root-dir","title":"set docker root dir","text":"<pre><code># set docker data folder, log driver\nsudo tee /etc/docker/daemon.json &lt;&lt; EOF\n{\n  \"data-root\": \"/data/docker-data\",\n  \"log-driver\": \"local\",\n  \"log-opts\": {\n    \"max-size\": \"20m\",\n    \"max-file\": \"5\"\n  }\n}\nEOF\nsudo systemctl restart docker.service\n</code></pre>","tags":["linux"]},{"location":"linux/init_ubuntu/#set-docker-private-registry","title":"set docker private registry","text":"<p>if private registry is HTTP without TLS, add host to <code>daemon.json</code> - <code>insecure-registry</code></p> <pre><code>{ \"insecure-registries\": [\"192.168.0.100\"] }\n</code></pre> <p>if private registry is using https with invalid or self-sign server cert, set ca cert ref: https://docs.docker.com/engine/security/certificates/</p> <pre><code>REGISTRY_HOST=192.168.0.100:443\nsudo mkdir -p \"/etc/docker/certs.d/${REGISTRY_HOST}\"\nopenssl s_client -connect ${REGISTRY_HOST} -showcerts &lt;/dev/null | awk '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/' &gt; /etc/docker/certs.d/${REGISTRY_HOST}/ca.crt\n</code></pre>","tags":["linux"]},{"location":"linux/init_ubuntu/#config-logging-file","title":"config logging file","text":"<pre><code># man page https://manpages.ubuntu.com/manpages/xenial/en/man8/logrotate.8.html\n# TODO\n</code></pre>","tags":["linux"]},{"location":"blog/archive/2024/06/","title":"2024/06","text":""},{"location":"blog/archive/2023/05/","title":"2023/05","text":""},{"location":"blog/archive/2023/04/","title":"2023/04","text":""},{"location":"blog/archive/2023/02/","title":"2023/02","text":""},{"location":"blog/archive/2023/01/","title":"2023/01","text":""},{"location":"blog/archive/2022/12/","title":"2022/12","text":""},{"location":"blog/archive/2022/10/","title":"2022/10","text":""},{"location":"blog/archive/2022/05/","title":"2022/05","text":""},{"location":"blog/archive/2022/04/","title":"2022/04","text":""},{"location":"blog/archive/2021/10/","title":"2021/10","text":""},{"location":"blog/page/2/","title":"Blog","text":""},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#cheat-sheet","title":"cheat-sheet","text":"<ul> <li>Error Cheat Sheet</li> <li>K8S Cheat Sheet</li> <li>Linux Cheat Sheet</li> <li>Other Cheat Sheet</li> </ul>"},{"location":"tags/#chrome","title":"chrome","text":"<ul> <li>Disable CORS on chrome</li> </ul>"},{"location":"tags/#ci-cd","title":"ci-cd","text":"<ul> <li>setup gitlab runner with cacheable docker executor</li> </ul>"},{"location":"tags/#cka","title":"cka","text":"<ul> <li>K8S CKA \u200b\u8003\u8a66\u200b\u7e3d\u7d50\u200b</li> </ul>"},{"location":"tags/#cloudflare","title":"cloudflare","text":"<ul> <li>Deploy my resume html page to cloudflare</li> </ul>"},{"location":"tags/#cloudflare-pages","title":"cloudflare-pages","text":"<ul> <li>Deploy my resume html page to cloudflare</li> </ul>"},{"location":"tags/#coredns","title":"coredns","text":"<ul> <li>Deploy DNS server with CoreDNS in Docker</li> </ul>"},{"location":"tags/#cors","title":"cors","text":"<ul> <li>Disable CORS on chrome</li> </ul>"},{"location":"tags/#devops","title":"devops","text":"<ul> <li>setup gitlab runner with cacheable docker executor</li> </ul>"},{"location":"tags/#dns","title":"dns","text":"<ul> <li>Deploy DNS server with CoreDNS in Docker</li> </ul>"},{"location":"tags/#dns-server","title":"dns-server","text":"<ul> <li>Deploy DNS server with CoreDNS in Docker</li> </ul>"},{"location":"tags/#docker","title":"docker","text":"<ul> <li>Deploy DNS server with CoreDNS in Docker</li> <li>what is these docker tags mean (bullseye, slim, alpine, jammy)?</li> </ul>"},{"location":"tags/#docker-tag","title":"docker-tag","text":"<ul> <li>what is these docker tags mean (bullseye, slim, alpine, jammy)?</li> </ul>"},{"location":"tags/#error","title":"error","text":"<ul> <li>Error Cheat Sheet</li> </ul>"},{"location":"tags/#exam","title":"exam","text":"<ul> <li>K8S CKA \u200b\u8003\u8a66\u200b\u7e3d\u7d50\u200b</li> </ul>"},{"location":"tags/#export-import","title":"export-import","text":"<ul> <li>Mariadb - export import large database</li> </ul>"},{"location":"tags/#gitlab","title":"gitlab","text":"<ul> <li>setup gitlab runner with cacheable docker executor</li> </ul>"},{"location":"tags/#gitlab-ci","title":"gitlab-ci","text":"<ul> <li>setup gitlab runner with cacheable docker executor</li> </ul>"},{"location":"tags/#gitlab-runner","title":"gitlab-runner","text":"<ul> <li>setup gitlab runner with cacheable docker executor</li> </ul>"},{"location":"tags/#ingress-nginx","title":"ingress-nginx","text":"<ul> <li>K8S - \u200b\u5b89\u88dd\u200b ingress nginx</li> <li>K8S - TLS with ingress nginx</li> <li>Export markdown to docx</li> </ul>"},{"location":"tags/#k8s","title":"k8s","text":"<ul> <li>K8S Cheat Sheet</li> </ul>"},{"location":"tags/#kubernetes","title":"kubernetes","text":"<ul> <li>K8S CKA \u200b\u8003\u8a66\u200b\u7e3d\u7d50\u200b</li> <li>K8S - \u200b\u5b89\u88dd\u200b ingress nginx</li> <li>K8S - TLS with ingress nginx</li> <li>Export markdown to docx</li> <li>K8S Cheat Sheet</li> </ul>"},{"location":"tags/#large-database","title":"large-database","text":"<ul> <li>Mariadb - export import large database</li> </ul>"},{"location":"tags/#linux","title":"linux","text":"<ul> <li>SSH - \u200b\u4f7f\u7528\u200b\u79c1\u200b\u9300\u200b\u767b\u200b\u5165\u200b</li> <li>Linux Cheat Sheet</li> <li>Init Ubuntu</li> </ul>"},{"location":"tags/#mariadb","title":"mariadb","text":"<ul> <li>Mariadb - export import large database</li> </ul>"},{"location":"tags/#minio","title":"minio","text":"<ul> <li>How to mount minio bucket as linux folder</li> </ul>"},{"location":"tags/#openssl","title":"openssl","text":"<ul> <li>OpenSSL - \u200b\u4f7f\u7528\u200b openssl \u200b\u751f\u6210\u200b TLS \u200b\u6191\u8b49\u200b</li> </ul>"},{"location":"tags/#resume","title":"resume","text":"<ul> <li>Deploy my resume html page to cloudflare</li> </ul>"},{"location":"tags/#s3","title":"s3","text":"<ul> <li>How to mount minio bucket as linux folder</li> </ul>"},{"location":"tags/#s3fs","title":"s3fs","text":"<ul> <li>How to mount minio bucket as linux folder</li> </ul>"},{"location":"tags/#ssh","title":"ssh","text":"<ul> <li>SSH - \u200b\u4f7f\u7528\u200b\u79c1\u200b\u9300\u200b\u767b\u200b\u5165\u200b</li> </ul>"},{"location":"tags/#tls","title":"tls","text":"<ul> <li>K8S - TLS with ingress nginx</li> <li>Export markdown to docx</li> <li>OpenSSL - \u200b\u4f7f\u7528\u200b openssl \u200b\u751f\u6210\u200b TLS \u200b\u6191\u8b49\u200b</li> </ul>"}]}